!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Address	prisma/migrations/20220521192104_rename_address_table/migration.sql	/^CREATE TABLE "Address" ($/;"	t
Address	src/repositories/enrollment-repository/index.ts	/^      Address: true,$/;"	m
Address	tests/factories/enrollments-factory.ts	/^      Address: true,$/;"	m
Address	tests/factories/enrollments-factory.ts	/^      Address: {$/;"	m
Address.Address_enrollmentId_key	prisma/migrations/20220525152602_change_enrollmentid_on_address_to_unique/migration.sql	/^CREATE UNIQUE INDEX "Address_enrollmentId_key" ON "Address"("enrollmentId");$/;"	i
Address.addressDetail	prisma/migrations/20220521192104_rename_address_table/migration.sql	/^    "addressDetail" VARCHAR(255) NOT NULL,$/;"	F
Address.cep	prisma/migrations/20220521192104_rename_address_table/migration.sql	/^    "cep" VARCHAR(255) NOT NULL,$/;"	F
Address.city	prisma/migrations/20220521192104_rename_address_table/migration.sql	/^    "city" VARCHAR(255) NOT NULL,$/;"	F
Address.createdAt	prisma/migrations/20220521192104_rename_address_table/migration.sql	/^    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,$/;"	F
Address.enrollmentId	prisma/migrations/20220521192104_rename_address_table/migration.sql	/^    "enrollmentId" INTEGER NOT NULL,$/;"	F
Address.id	prisma/migrations/20220521192104_rename_address_table/migration.sql	/^    "id" SERIAL NOT NULL,$/;"	F
Address.neighborhood	prisma/migrations/20220521192104_rename_address_table/migration.sql	/^    "neighborhood" VARCHAR(255) NOT NULL,$/;"	F
Address.number	prisma/migrations/20220521192104_rename_address_table/migration.sql	/^    "number" VARCHAR(255) NOT NULL,$/;"	F
Address.state	prisma/migrations/20220521192104_rename_address_table/migration.sql	/^    "state" VARCHAR(255) NOT NULL,$/;"	F
Address.street	prisma/migrations/20220521192104_rename_address_table/migration.sql	/^    "street" VARCHAR(255) NOT NULL,$/;"	F
Address.updatedAt	prisma/migrations/20220521192104_rename_address_table/migration.sql	/^    "updatedAt" TIMESTAMP(3) NOT NULL,$/;"	F
AddressEnrollment	src/protocols.ts	/^export type AddressEnrollment = {$/;"	t
Adress	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^CREATE TABLE "Adress" ($/;"	t
Adress.addressDetail	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "addressDetail" VARCHAR(255) NOT NULL,$/;"	F
Adress.cep	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "cep" VARCHAR(255) NOT NULL,$/;"	F
Adress.city	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "city" VARCHAR(255) NOT NULL,$/;"	F
Adress.createdAt	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,$/;"	F
Adress.enrollmentId	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "enrollmentId" INTEGER NOT NULL,$/;"	F
Adress.id	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "id" SERIAL NOT NULL,$/;"	F
Adress.neighborhood	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "neighborhood" VARCHAR(255) NOT NULL,$/;"	F
Adress.number	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "number" VARCHAR(255) NOT NULL,$/;"	F
Adress.state	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "state" VARCHAR(255) NOT NULL,$/;"	F
Adress.street	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "street" VARCHAR(255) NOT NULL,$/;"	F
Adress.updatedAt	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "updatedAt" TIMESTAMP(3) NOT NULL,$/;"	F
ApplicationEmailError	src/errors/invalid-email-error.ts	/^export type ApplicationEmailError = ApplicationError & { email: string };$/;"	t
ApplicationError	src/protocols.ts	/^export type ApplicationError = {$/;"	t
ApplicationInvalidateDataError	src/errors/invalid-data-error.ts	/^type ApplicationInvalidateDataError = ApplicationError & {$/;"	t
AuthenticatedRequest	src/middlewares/authentication-middleware.ts	/^export type AuthenticatedRequest = Request & JWTPayload;$/;"	t
Booking	prisma/migrations/20221128215237_hotel/migration.sql	/^CREATE TABLE "Booking" ($/;"	t
Booking.createdAt	prisma/migrations/20221128215237_hotel/migration.sql	/^    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,$/;"	F
Booking.id	prisma/migrations/20221128215237_hotel/migration.sql	/^    "id" SERIAL NOT NULL,$/;"	F
Booking.roomId	prisma/migrations/20221128215237_hotel/migration.sql	/^    "roomId" INTEGER NOT NULL,$/;"	F
Booking.updatedAt	prisma/migrations/20221128215237_hotel/migration.sql	/^    "updatedAt" TIMESTAMP(3) NOT NULL,$/;"	F
Booking.userId	prisma/migrations/20221128215237_hotel/migration.sql	/^    "userId" INTEGER NOT NULL,$/;"	F
CardPaymentParams	src/services/payments-service/index.ts	/^export type CardPaymentParams = {$/;"	t
CreateAddressParams	src/repositories/address-repository/index.ts	/^export type CreateAddressParams = Omit<Address, "id" | "createdAt" | "updatedAt" | "enrollmentId">;$/;"	t
CreateEnrollmentParams	src/repositories/enrollment-repository/index.ts	/^export type CreateEnrollmentParams = Omit<Enrollment, "id" | "createdAt" | "updatedAt">;$/;"	t
CreateOrUpdateEnrollmentWithAddress	src/services/enrollments-service/index.ts	/^export type CreateOrUpdateEnrollmentWithAddress = CreateEnrollmentParams & {$/;"	t
CreateTicketParams	src/repositories/ticket-repository/index.ts	/^export type CreateTicketParams = Omit<Ticket, "id" | "createdAt" | "updatedAt">$/;"	t
CreateUserParams	src/services/users-service/index.ts	/^export type CreateUserParams = Pick<User, "email" | "password">;$/;"	t
Enrollment	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^CREATE TABLE "Enrollment" ($/;"	t
Enrollment	src/repositories/address-repository/index.ts	/^      Enrollment: { connect: { id: enrollmentId } },$/;"	m
Enrollment	src/repositories/ticket-repository/index.ts	/^      Enrollment: true,$/;"	m
Enrollment.Enrollment_userId_key	prisma/migrations/20220522143837_change_user_id_collumn_in_enrollments_table_to_unique/migration.sql	/^CREATE UNIQUE INDEX "Enrollment_userId_key" ON "Enrollment"("userId");$/;"	i
Enrollment.birthday	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "birthday" TIMESTAMP(3) NOT NULL,$/;"	F
Enrollment.cpf	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "cpf" VARCHAR(255) NOT NULL,$/;"	F
Enrollment.createdAt	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,$/;"	F
Enrollment.id	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "id" SERIAL NOT NULL,$/;"	F
Enrollment.name	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "name" VARCHAR(255) NOT NULL,$/;"	F
Enrollment.phone	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "phone" VARCHAR(255) NOT NULL,$/;"	F
Enrollment.updatedAt	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "updatedAt" TIMESTAMP(3) NOT NULL,$/;"	F
Enrollment.userId	prisma/migrations/20220521191854_create_enrollment_and_adress_tables/migration.sql	/^    "userId" INTEGER NOT NULL,$/;"	F
Event	prisma/migrations/20220521172530_create_events_table/migration.sql	/^CREATE TABLE "Event" ($/;"	t
Event.backgroundImageUrl	prisma/migrations/20220521172530_create_events_table/migration.sql	/^    "backgroundImageUrl" VARCHAR(255) NOT NULL,$/;"	F
Event.createdAt	prisma/migrations/20220521172530_create_events_table/migration.sql	/^    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,$/;"	F
Event.endsAt	prisma/migrations/20220521172530_create_events_table/migration.sql	/^    "endsAt" TIMESTAMP(3) NOT NULL,$/;"	F
Event.id	prisma/migrations/20220521172530_create_events_table/migration.sql	/^    "id" SERIAL NOT NULL,$/;"	F
Event.logoImageUrl	prisma/migrations/20220521172530_create_events_table/migration.sql	/^    "logoImageUrl" VARCHAR(255) NOT NULL,$/;"	F
Event.startsAt	prisma/migrations/20220521172530_create_events_table/migration.sql	/^    "startsAt" TIMESTAMP(3) NOT NULL,$/;"	F
Event.title	prisma/migrations/20220521172530_create_events_table/migration.sql	/^    "title" VARCHAR(255) NOT NULL,$/;"	F
Event.updatedAt	prisma/migrations/20220521172530_create_events_table/migration.sql	/^    "updatedAt" TIMESTAMP(3) NOT NULL,$/;"	F
GetAddressResult	src/services/enrollments-service/index.ts	/^type GetAddressResult = Omit<Address, "createdAt" | "updatedAt" | "enrollmentId">;$/;"	t
GetFirstEventResult	src/services/events-service/index.ts	/^export type GetFirstEventResult = Omit<Event, "createdAt" | "updatedAt">;$/;"	t
GetOneWithAddressByUserIdResult	src/services/enrollments-service/index.ts	/^type GetOneWithAddressByUserIdResult = Omit<Enrollment, "userId" | "createdAt" | "updatedAt">;$/;"	t
GetUserOrFailResult	src/services/authentication-service/index.ts	/^type GetUserOrFailResult = Pick<User, "id" | "email" | "password">;$/;"	t
Hotel	prisma/migrations/20221128215237_hotel/migration.sql	/^CREATE TABLE "Hotel" ($/;"	t
Hotel.createdAt	prisma/migrations/20221128215237_hotel/migration.sql	/^    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,$/;"	F
Hotel.id	prisma/migrations/20221128215237_hotel/migration.sql	/^    "id" SERIAL NOT NULL,$/;"	F
Hotel.image	prisma/migrations/20221128215237_hotel/migration.sql	/^    "image" TEXT NOT NULL,$/;"	F
Hotel.name	prisma/migrations/20221128215237_hotel/migration.sql	/^    "name" TEXT NOT NULL,$/;"	F
Hotel.updatedAt	prisma/migrations/20221128215237_hotel/migration.sql	/^    "updatedAt" TIMESTAMP(3) NOT NULL,$/;"	F
JWTPayload	src/middlewares/authentication-middleware.ts	/^type JWTPayload = {$/;"	t
Joi	src/schemas/authentication-schemas.ts	/^import Joi from "joi";$/;"	I
Joi	src/schemas/enrollments-schemas.ts	/^import Joi from "joi";$/;"	I
Joi	src/schemas/users-schemas.ts	/^import Joi from "joi";$/;"	I
JoiCepValidation	src/schemas/enrollments-schemas.ts	/^function JoiCepValidation(value: string, helpers: Joi.CustomHelpers<string>) {$/;"	f
Payment	prisma/migrations/20221116174837_tickets/migration.sql	/^CREATE TABLE "Payment" ($/;"	t
Payment.cardIssuer	prisma/migrations/20221116174837_tickets/migration.sql	/^    "cardIssuer" TEXT NOT NULL,$/;"	F
Payment.cardLastDigits	prisma/migrations/20221116174837_tickets/migration.sql	/^    "cardLastDigits" TEXT NOT NULL,$/;"	F
Payment.createdAt	prisma/migrations/20221116174837_tickets/migration.sql	/^    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,$/;"	F
Payment.id	prisma/migrations/20221116174837_tickets/migration.sql	/^    "id" SERIAL NOT NULL,$/;"	F
Payment.ticketId	prisma/migrations/20221116174837_tickets/migration.sql	/^    "ticketId" INTEGER NOT NULL,$/;"	F
Payment.updatedAt	prisma/migrations/20221116174837_tickets/migration.sql	/^    "updatedAt" TIMESTAMP(3) NOT NULL,$/;"	F
Payment.value	prisma/migrations/20221116174837_tickets/migration.sql	/^    "value" INTEGER NOT NULL,$/;"	F
PaymentParams	src/repositories/payment-repository/index.ts	/^export type PaymentParams = Omit<Payment, "id" | "createdAt" | "updatedAt">$/;"	t
RequestError	src/protocols.ts	/^export type RequestError = {$/;"	t
Room	prisma/migrations/20221128215237_hotel/migration.sql	/^CREATE TABLE "Room" ($/;"	t
Room	src/repositories/booking-repository/index.ts	/^      Room: true$/;"	m
Room.capacity	prisma/migrations/20221128215237_hotel/migration.sql	/^    "capacity" INTEGER NOT NULL,$/;"	F
Room.createdAt	prisma/migrations/20221128215237_hotel/migration.sql	/^    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,$/;"	F
Room.hotelId	prisma/migrations/20221128215237_hotel/migration.sql	/^    "hotelId" INTEGER NOT NULL,$/;"	F
Room.id	prisma/migrations/20221128215237_hotel/migration.sql	/^    "id" SERIAL NOT NULL,$/;"	F
Room.name	prisma/migrations/20221128215237_hotel/migration.sql	/^    "name" TEXT NOT NULL,$/;"	F
Room.updatedAt	prisma/migrations/20221128215237_hotel/migration.sql	/^    "updatedAt" TIMESTAMP(3) NOT NULL,$/;"	F
Rooms	src/repositories/hotel-repository/index.ts	/^      Rooms: true,$/;"	m
Rooms	tests/integration/hotels.test.ts	/^          Rooms: [],$/;"	m
Rooms	tests/integration/hotels.test.ts	/^        Rooms: [{$/;"	m
Session	prisma/migrations/20220521144316_create_session_table/migration.sql	/^CREATE TABLE "Session" ($/;"	t
Session.createdAt	prisma/migrations/20220521144316_create_session_table/migration.sql	/^    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,$/;"	F
Session.id	prisma/migrations/20220521144316_create_session_table/migration.sql	/^    "id" SERIAL NOT NULL,$/;"	F
Session.token	prisma/migrations/20220521144316_create_session_table/migration.sql	/^    "token" VARCHAR(255) NOT NULL,$/;"	F
Session.updatedAt	prisma/migrations/20220521144316_create_session_table/migration.sql	/^    "updatedAt" TIMESTAMP(3) NOT NULL,$/;"	F
Session.userId	prisma/migrations/20220521144316_create_session_table/migration.sql	/^    "userId" INTEGER NOT NULL,$/;"	F
Setting	prisma/migrations/20220521170313_create_settings_table/migration.sql	/^CREATE TABLE "Setting" ($/;"	t
Setting.Setting_name_key	prisma/migrations/20220521170313_create_settings_table/migration.sql	/^CREATE UNIQUE INDEX "Setting_name_key" ON "Setting"("name");$/;"	i
Setting.id	prisma/migrations/20220521170313_create_settings_table/migration.sql	/^    "id" SERIAL NOT NULL,$/;"	F
Setting.name	prisma/migrations/20220521170313_create_settings_table/migration.sql	/^    "name" TEXT NOT NULL,$/;"	F
Setting.value	prisma/migrations/20220521170313_create_settings_table/migration.sql	/^    "value" TEXT NOT NULL,$/;"	F
SignInParams	src/services/authentication-service/index.ts	/^export type SignInParams = Pick<User, "email" | "password">;$/;"	t
SignInResult	src/services/authentication-service/index.ts	/^type SignInResult = {$/;"	t
Ticket	prisma/migrations/20221116174837_tickets/migration.sql	/^CREATE TABLE "Ticket" ($/;"	t
Ticket.createdAt	prisma/migrations/20221116174837_tickets/migration.sql	/^    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,$/;"	F
Ticket.enrollmentId	prisma/migrations/20221116174837_tickets/migration.sql	/^    "enrollmentId" INTEGER NOT NULL,$/;"	F
Ticket.id	prisma/migrations/20221116174837_tickets/migration.sql	/^    "id" SERIAL NOT NULL,$/;"	F
Ticket.status	prisma/migrations/20221116174837_tickets/migration.sql	/^    "status" "TicketStatus" NOT NULL,$/;"	F
Ticket.ticketTypeId	prisma/migrations/20221116174837_tickets/migration.sql	/^    "ticketTypeId" INTEGER NOT NULL,$/;"	F
Ticket.updatedAt	prisma/migrations/20221116174837_tickets/migration.sql	/^    "updatedAt" TIMESTAMP(3) NOT NULL,$/;"	F
TicketType	prisma/migrations/20221116174837_tickets/migration.sql	/^CREATE TABLE "TicketType" ($/;"	t
TicketType	src/repositories/ticket-repository/index.ts	/^      TicketType: true, \/\/inner join$/;"	m
TicketType	src/repositories/ticket-repository/index.ts	/^      TicketType: true,$/;"	m
TicketType	tests/integration/tickets.test.ts	/^        TicketType: {$/;"	m
TicketType.createdAt	prisma/migrations/20221116174837_tickets/migration.sql	/^    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,$/;"	F
TicketType.id	prisma/migrations/20221116174837_tickets/migration.sql	/^    "id" SERIAL NOT NULL,$/;"	F
TicketType.includesHotel	prisma/migrations/20221116174837_tickets/migration.sql	/^    "includesHotel" BOOLEAN NOT NULL,$/;"	F
TicketType.isRemote	prisma/migrations/20221116174837_tickets/migration.sql	/^    "isRemote" BOOLEAN NOT NULL,$/;"	F
TicketType.name	prisma/migrations/20221116174837_tickets/migration.sql	/^    "name" VARCHAR(255) NOT NULL,$/;"	F
TicketType.price	prisma/migrations/20221116174837_tickets/migration.sql	/^    "price" INTEGER NOT NULL,$/;"	F
TicketType.updatedAt	prisma/migrations/20221116174837_tickets/migration.sql	/^    "updatedAt" TIMESTAMP(3) NOT NULL,$/;"	F
UpdateAddressParams	src/repositories/address-repository/index.ts	/^export type UpdateAddressParams = CreateAddressParams;$/;"	t
UpdateEnrollmentParams	src/repositories/enrollment-repository/index.ts	/^export type UpdateEnrollmentParams = Omit<CreateEnrollmentParams, "userId">;$/;"	t
User	prisma/migrations/20220519200857_init/migration.sql	/^CREATE TABLE "User" ($/;"	t
User.User_email_key	prisma/migrations/20220519200857_init/migration.sql	/^CREATE UNIQUE INDEX "User_email_key" ON "User"("email");$/;"	i
User.createdAt	prisma/migrations/20220519200857_init/migration.sql	/^    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,$/;"	F
User.email	prisma/migrations/20220519200857_init/migration.sql	/^    "email" VARCHAR(255) NOT NULL,$/;"	F
User.id	prisma/migrations/20220519200857_init/migration.sql	/^    "id" SERIAL NOT NULL,$/;"	F
User.password	prisma/migrations/20220519200857_init/migration.sql	/^    "password" VARCHAR(255) NOT NULL,$/;"	F
User.updatedAt	prisma/migrations/20220519200857_init/migration.sql	/^    "updatedAt" TIMESTAMP(3) NOT NULL,$/;"	F
ValidationMiddleware	src/middlewares/validation-middleware.ts	/^type ValidationMiddleware = (req: Request, res: Response, next: NextFunction)=> void;$/;"	t
ViaCEPAddress	src/protocols.ts	/^export type ViaCEPAddress = {$/;"	t
abortEarly	src/middlewares/validation-middleware.ts	/^      abortEarly: false,$/;"	m
address	src/schemas/enrollments-schemas.ts	/^  address: Joi.object({$/;"	m
address	src/services/enrollments-service/index.ts	/^  address: CreateAddressParams;$/;"	m
address	tests/integration/enrollments.test.ts	/^        address: {$/;"	m
address	tests/schemas/enrollments-schemas.test.ts	/^          address: {$/;"	m
address	tests/schemas/enrollments-schemas.test.ts	/^    address: {$/;"	m
addressDetail	src/schemas/enrollments-schemas.ts	/^    addressDetail: Joi.string().allow(null, ""),$/;"	m
addressDetail	tests/integration/enrollments.test.ts	/^          addressDetail: enrollment.Address[0].addressDetail,$/;"	m
addressDetail	tests/integration/enrollments.test.ts	/^          addressDetail: faker.lorem.sentence(),$/;"	m
addressDetail	tests/schemas/enrollments-schemas.test.ts	/^            addressDetail: faker.datatype.number(),$/;"	m
addressDetail	tests/schemas/enrollments-schemas.test.ts	/^      addressDetail: faker.lorem.sentence(),$/;"	m
addressRepository	src/services/enrollments-service/index.ts	/^import addressRepository, { CreateAddressParams } from "@\/repositories\/address-repository";$/;"	I
alwaysTryTypes	.eslintrc.js	/^        alwaysTryTypes: true,$/;"	P
anonymous	.eslintrc.js	/^        anonymous: "never",$/;"	P
app	src/server.ts	/^import app, { init } from "@\/app";$/;"	I
app	tests/integration/authentication.test.ts	/^import app, { init } from "@\/app";$/;"	I
app	tests/integration/enrollments.test.ts	/^import app, { init } from "@\/app";$/;"	I
app	tests/integration/event.test.ts	/^import app, { init } from "@\/app";$/;"	I
app	tests/integration/health.test.ts	/^import app, { init } from "@\/app";$/;"	I
app	tests/integration/hotels.test.ts	/^import app, { init } from "@\/app";$/;"	I
app	tests/integration/payments.test.ts	/^import app, { init } from "@\/app";$/;"	I
app	tests/integration/tickets.test.ts	/^import app, { init } from "@\/app";$/;"	I
app	tests/integration/users.test.ts	/^import app, { init } from "@\/app";$/;"	I
asyncArrow	.eslintrc.js	/^        asyncArrow: "always",$/;"	P
authenticateToken	src/middlewares/authentication-middleware.ts	/^export async function authenticateToken(req: AuthenticatedRequest, res: Response, next: NextFunction) {$/;"	f
authenticationService	src/controllers/authentication-controller.ts	/^import authenticationService, { SignInParams } from "@\/services\/authentication-service";$/;"	I
authenticationService	tests/services/authentication-service.test.ts	/^import authenticationService, { invalidCredentialsError } from "@\/services\/authentication-service";$/;"	I
axios	src/utils/request.ts	/^import axios from "axios";$/;"	I
backgroundImageUrl	prisma/seed.ts	/^        backgroundImageUrl: "linear-gradient(to right, #FA4098, #FFD77F)",$/;"	m
backgroundImageUrl	tests/factories/events-factory.ts	/^      backgroundImageUrl: params.backgroundImageUrl || faker.image.imageUrl(),$/;"	m
backgroundImageUrl	tests/integration/event.test.ts	/^      backgroundImageUrl: event.backgroundImageUrl,$/;"	m
bairro	src/protocols.ts	/^  bairro: string,$/;"	m
bairro	tests/factories/enrollments-factory.ts	/^    bairro: "Itaim Bibi",$/;"	m
bcrypt	src/services/authentication-service/index.ts	/^import bcrypt from "bcrypt";$/;"	I
bcrypt	src/services/users-service/index.ts	/^import bcrypt from "bcrypt";$/;"	I
bcrypt	tests/factories/users-factory.ts	/^import bcrypt from "bcrypt";$/;"	I
bcrypt	tests/services/users-service.test.ts	/^import bcrypt from "bcrypt";$/;"	I
beforeAll	tests/integration/authentication.test.ts	/^beforeAll(async () => {$/;"	m
beforeAll	tests/integration/enrollments.test.ts	/^beforeAll(async () => {$/;"	m
beforeAll	tests/integration/event.test.ts	/^beforeAll(async () => {$/;"	m
beforeAll	tests/integration/health.test.ts	/^beforeAll(async () => {$/;"	m
beforeAll	tests/integration/hotels.test.ts	/^beforeAll(async () => {$/;"	m
beforeAll	tests/integration/payments.test.ts	/^beforeAll(async () => {$/;"	m
beforeAll	tests/integration/tickets.test.ts	/^beforeAll(async () => {$/;"	m
beforeAll	tests/integration/users.test.ts	/^      beforeAll(async () => {$/;"	m
beforeAll	tests/integration/users.test.ts	/^beforeAll(async () => {$/;"	m
beforeAll	tests/services/authentication-service.test.ts	/^beforeAll(async () => {$/;"	m
beforeAll	tests/services/users-service.test.ts	/^beforeAll(async () => {$/;"	m
beforeEach	tests/integration/hotels.test.ts	/^beforeEach(async () => {$/;"	m
beforeEach	tests/integration/payments.test.ts	/^beforeEach(async () => {$/;"	m
beforeEach	tests/integration/tickets.test.ts	/^beforeEach(async () => {$/;"	m
birthday	src/schemas/enrollments-schemas.ts	/^  birthday: Joi.string().isoDate().required(),$/;"	m
birthday	tests/factories/enrollments-factory.ts	/^      birthday: faker.date.past(),$/;"	m
birthday	tests/integration/enrollments.test.ts	/^            birthday: dayjs(body.birthday).toDate(),$/;"	m
birthday	tests/integration/enrollments.test.ts	/^        birthday: enrollment.birthday.toISOString(),$/;"	m
birthday	tests/integration/enrollments.test.ts	/^        birthday: faker.date.past().toISOString(),$/;"	m
birthday	tests/schemas/enrollments-schemas.test.ts	/^    birthday: faker.date.past().toISOString(),$/;"	m
bookingRepository	src/services/bookings-service/index.ts	/^import bookingRepository from "@\/repositories\/booking-repository";$/;"	I
bookingService	src/controllers/bookings-controller.ts	/^import bookingService from "@\/services\/bookings-service";$/;"	I
canEnrollOrFail	src/services/users-service/index.ts	/^async function canEnrollOrFail() {$/;"	f
cannotEnrollBeforeStartDateError	src/errors/cannot-enroll-before-start-date-error.ts	/^export function cannotEnrollBeforeStartDateError(): ApplicationError {$/;"	f
cannotListHotelsError	src/errors/cannot-list-hotels-error.ts	/^export function cannotListHotelsError(): ApplicationError {$/;"	f
capacity	tests/factories/hotels-factory.ts	/^      capacity: 3,$/;"	m
capacity	tests/integration/hotels.test.ts	/^          capacity: createdRoom.capacity,$/;"	m
cardIssuer	src/services/payments-service/index.ts	/^    cardIssuer: cardData.issuer,$/;"	m
cardIssuer	tests/factories/payments-factory.ts	/^      cardIssuer: faker.name.findName(),$/;"	m
cardIssuer	tests/integration/payments.test.ts	/^        cardIssuer: body.cardData.issuer,$/;"	m
cardIssuer	tests/integration/payments.test.ts	/^        cardIssuer: payment.cardIssuer,$/;"	m
cardLastDigits	src/services/payments-service/index.ts	/^    cardLastDigits: cardData.number.toString().slice(-4),$/;"	m
cardLastDigits	tests/factories/payments-factory.ts	/^      cardLastDigits: faker.datatype.number({ min: 1000, max: 9999 }).toString(),$/;"	m
cardLastDigits	tests/integration/payments.test.ts	/^        cardLastDigits: body.cardData.number.slice(-4),$/;"	m
cardLastDigits	tests/integration/payments.test.ts	/^        cardLastDigits: payment.cardLastDigits,$/;"	m
cep	src/schemas/enrollments-schemas.ts	/^    cep: cepValidationSchema,$/;"	m
cep	tests/factories/enrollments-factory.ts	/^          cep: faker.address.zipCode(),$/;"	m
cep	tests/integration/enrollments.test.ts	/^          cep: "0",$/;"	m
cep	tests/integration/enrollments.test.ts	/^          cep: "90830-563",$/;"	m
cep	tests/integration/enrollments.test.ts	/^          cep: enrollment.Address[0].cep,$/;"	m
cep	tests/schemas/enrollments-schemas.test.ts	/^      cep: "90830-563",$/;"	m
cidade	src/protocols.ts	/^  cidade: string,$/;"	m
cidade	src/services/enrollments-service/index.ts	/^    cidade: localidade,$/;"	m
cidade	tests/factories/enrollments-factory.ts	/^    cidade: "São Paulo",$/;"	m
city	src/schemas/enrollments-schemas.ts	/^    city: Joi.string().required(),$/;"	m
city	tests/factories/enrollments-factory.ts	/^          city: faker.address.city(),$/;"	m
city	tests/integration/enrollments.test.ts	/^          city: enrollment.Address[0].city,$/;"	m
city	tests/integration/enrollments.test.ts	/^          city: faker.address.city(),$/;"	m
city	tests/schemas/enrollments-schemas.test.ts	/^            city: faker.datatype.number(),$/;"	m
city	tests/schemas/enrollments-schemas.test.ts	/^      city: faker.address.city(),$/;"	m
cleanDb	tests/helpers.ts	/^export async function cleanDb() {$/;"	f
close	src/app.ts	/^export async function close(): Promise<void> {$/;"	f
complemento	src/protocols.ts	/^  complemento: string,$/;"	m
complemento	tests/factories/enrollments-factory.ts	/^    complemento: "de 3252 ao fim - lado par",$/;"	m
conflictError	src/errors/conflict-error.ts	/^export function conflictError(message: string): ApplicationError {$/;"	f
connectDb	src/app.ts	/^  connectDb();$/;"	m
connectDb	src/config/database.ts	/^export function connectDb(): void {$/;"	f
convertFromObjToEnvString	.github/workflows/scripts/generate-env-file.js	/^function convertFromObjToEnvString(envObj) {$/;"	F
cors	src/app.ts	/^import cors from "cors";$/;"	I
cpf	src/schemas/enrollments-schemas.ts	/^  cpf: cpfValidationSchema,$/;"	m
cpf	tests/factories/enrollments-factory.ts	/^      cpf: generateCPF(),$/;"	m
cpf	tests/integration/enrollments.test.ts	/^            cpf: body.cpf,$/;"	m
cpf	tests/integration/enrollments.test.ts	/^        cpf: enrollment.cpf,$/;"	m
cpf	tests/integration/enrollments.test.ts	/^        cpf: generateCPF(),$/;"	m
cpf	tests/schemas/enrollments-schemas.test.ts	/^    cpf: generateCPF(),$/;"	m
create	src/repositories/address-repository/index.ts	/^    create: {$/;"	m
create	src/repositories/enrollment-repository/index.ts	/^    create: createdEnrollment,$/;"	m
create	src/repositories/session-repository/index.ts	/^async function create(data: Prisma.SessionUncheckedCreateInput) {$/;"	f
create	src/repositories/user-repository/index.ts	/^async function create(data: Prisma.UserUncheckedCreateInput) {$/;"	f
create	tests/factories/enrollments-factory.ts	/^        create: {$/;"	m
createEnrollmentSchema	src/schemas/enrollments-schemas.ts	/^export const createEnrollmentSchema = Joi.object<CreateOrUpdateEnrollmentWithAddress>({$/;"	v
createEnrollmentWithAddress	tests/factories/enrollments-factory.ts	/^export async function createEnrollmentWithAddress(user?: User) {$/;"	f
createEvent	tests/factories/events-factory.ts	/^export function createEvent(params: Partial<Event> = {}): Promise<Event> {$/;"	f
createHotel	tests/factories/hotels-factory.ts	/^export async function createHotel() {$/;"	f
createOrUpdateEnrollmentWithAddress	src/services/enrollments-service/index.ts	/^async function createOrUpdateEnrollmentWithAddress(params: CreateOrUpdateEnrollmentWithAddress) {$/;"	f
createPayment	src/repositories/payment-repository/index.ts	/^async function createPayment(ticketId: number, params: PaymentParams) {$/;"	f
createPayment	tests/factories/payments-factory.ts	/^export async function createPayment(ticketId: number, value: number) {$/;"	f
createRoomWithHotelId	tests/factories/hotels-factory.ts	/^export async function createRoomWithHotelId(hotelId: number) {$/;"	f
createSession	src/services/authentication-service/index.ts	/^async function createSession(userId: number) {$/;"	f
createSession	tests/factories/sessions-factory.ts	/^export async function createSession(token: string): Promise<Session> {$/;"	f
createTicket	src/controllers/tickets-controller.ts	/^export async function createTicket(req: AuthenticatedRequest, res: Response) {$/;"	f
createTicket	src/repositories/ticket-repository/index.ts	/^async function createTicket(ticket: CreateTicketParams) {$/;"	f
createTicket	src/services/tickets-service/index.ts	/^async function createTicket(userId: number, ticketTypeId: number) {$/;"	f
createTicket	tests/factories/tickets-factory.ts	/^export async function createTicket(enrollmentId: number, ticketTypeId: number, status: TicketStatus) {$/;"	f
createTicketType	tests/factories/tickets-factory.ts	/^export async function createTicketType() {$/;"	f
createTicketTypeRemote	tests/factories/tickets-factory.ts	/^export async function createTicketTypeRemote() {$/;"	f
createTicketTypeWithHotel	tests/factories/tickets-factory.ts	/^export async function createTicketTypeWithHotel() {$/;"	f
createUser	src/services/users-service/index.ts	/^export async function createUser({ email, password }: CreateUserParams): Promise<User> {$/;"	f
createUser	tests/factories/users-factory.ts	/^export async function createUser(params: Partial<User> = {}): Promise<User> {$/;"	f
createUserSchema	src/schemas/users-schemas.ts	/^export const createUserSchema = Joi.object<CreateUserParams>({$/;"	v
createdAt	tests/integration/hotels.test.ts	/^          createdAt: createdHotel.createdAt.toISOString(),$/;"	m
createdAt	tests/integration/hotels.test.ts	/^          createdAt: createdRoom.createdAt.toISOString(),$/;"	m
createdAt	tests/integration/hotels.test.ts	/^        createdAt: createdHotel.createdAt.toISOString(),$/;"	m
createdAt	tests/integration/payments.test.ts	/^        createdAt: expect.any(String),$/;"	m
createdAt	tests/integration/tickets.test.ts	/^          createdAt: ticketType.createdAt.toISOString(),$/;"	m
createdAt	tests/integration/tickets.test.ts	/^        createdAt: expect.any(String),$/;"	m
createdAt	tests/integration/tickets.test.ts	/^        createdAt: ticket.createdAt.toISOString(),$/;"	m
createdEnrollment	src/repositories/enrollment-repository/index.ts	/^  createdEnrollment: CreateEnrollmentParams,$/;"	m
createhAddressWithCEP	tests/factories/enrollments-factory.ts	/^export function createhAddressWithCEP() {$/;"	f
custom	.eslintrc.js	/^        custom: {$/;"	P
cvv	src/services/payments-service/index.ts	/^  cvv: number$/;"	m
cvv	tests/factories/payments-factory.ts	/^    cvv: faker.datatype.number({ min: 100, max: 999 }).toString(),$/;"	m
data	prisma/seed.ts	/^      data: {$/;"	m
data	src/errors/request-error.ts	/^    data: null,$/;"	m
data	src/protocols.ts	/^  data: object | null,$/;"	m
data	src/repositories/payment-repository/index.ts	/^    data: {$/;"	m
data	src/repositories/ticket-repository/index.ts	/^    data: {$/;"	m
data	tests/factories/enrollments-factory.ts	/^    data: {$/;"	m
data	tests/factories/events-factory.ts	/^    data: {$/;"	m
data	tests/factories/hotels-factory.ts	/^    data: {$/;"	m
data	tests/factories/payments-factory.ts	/^    data: {$/;"	m
data	tests/factories/sessions-factory.ts	/^    data: {$/;"	m
data	tests/factories/tickets-factory.ts	/^    data: {$/;"	m
data	tests/factories/users-factory.ts	/^    data: {$/;"	m
dayjs	prisma/seed.ts	/^import dayjs from "dayjs";$/;"	I
dayjs	src/services/events-service/index.ts	/^import dayjs from "dayjs";$/;"	I
dayjs	tests/factories/events-factory.ts	/^import dayjs from "dayjs";$/;"	I
dayjs	tests/integration/enrollments.test.ts	/^import dayjs from "dayjs";$/;"	I
dayjs	tests/integration/users.test.ts	/^import dayjs from "dayjs";$/;"	I
debug	.husky/_/husky.sh	/^  debug () {$/;"	f
describe	tests/integration/authentication.test.ts	/^    describe("when credentials are valid", () => {$/;"	m
describe	tests/integration/authentication.test.ts	/^  describe("when body is valid", () => {$/;"	m
describe	tests/integration/authentication.test.ts	/^describe("POST \/auth\/sign-in", () => {$/;"	m
describe	tests/integration/enrollments.test.ts	/^    describe("when body is invalid", () => {$/;"	m
describe	tests/integration/enrollments.test.ts	/^    describe("when body is valid", () => {$/;"	m
describe	tests/integration/enrollments.test.ts	/^  describe("when token is valid", () => {$/;"	m
describe	tests/integration/enrollments.test.ts	/^describe("GET \/enrollments", () => {$/;"	m
describe	tests/integration/enrollments.test.ts	/^describe("GET \/enrollments\/cep", () => {$/;"	m
describe	tests/integration/enrollments.test.ts	/^describe("POST \/enrollments", () => {$/;"	m
describe	tests/integration/event.test.ts	/^describe("GET \/event", () => {$/;"	m
describe	tests/integration/health.test.ts	/^describe("GET \/health", () => {$/;"	m
describe	tests/integration/hotels.test.ts	/^  describe("when token is valid", () => {$/;"	m
describe	tests/integration/hotels.test.ts	/^describe("GET \/hotels", () => {$/;"	m
describe	tests/integration/hotels.test.ts	/^describe("GET \/hotels\/:hotelId", () => {$/;"	m
describe	tests/integration/payments.test.ts	/^  describe("when token is valid", () => {$/;"	m
describe	tests/integration/payments.test.ts	/^describe("GET \/payments", () => {$/;"	m
describe	tests/integration/payments.test.ts	/^describe("POST \/payments\/process", () => {$/;"	m
describe	tests/integration/tickets.test.ts	/^  describe("when token is valid", () => {$/;"	m
describe	tests/integration/tickets.test.ts	/^describe("GET \/tickets", () => {$/;"	m
describe	tests/integration/tickets.test.ts	/^describe("GET \/tickets\/types", () => {$/;"	m
describe	tests/integration/tickets.test.ts	/^describe("POST \/tickets", () => {$/;"	m
describe	tests/integration/users.test.ts	/^    describe("when event started", () => {$/;"	m
describe	tests/integration/users.test.ts	/^  describe("when body is valid", () => {$/;"	m
describe	tests/integration/users.test.ts	/^describe("POST \/users", () => {$/;"	m
describe	tests/schemas/authentication-schemas.test.ts	/^  describe("when email is not valid", () => {$/;"	m
describe	tests/schemas/authentication-schemas.test.ts	/^  describe("when password is not valid", () => {$/;"	m
describe	tests/schemas/authentication-schemas.test.ts	/^describe("signInSchema", () => {$/;"	m
describe	tests/schemas/enrollments-schemas.test.ts	/^    describe("addressDetail", () => {$/;"	m
describe	tests/schemas/enrollments-schemas.test.ts	/^    describe("cep", () => {$/;"	m
describe	tests/schemas/enrollments-schemas.test.ts	/^    describe("city", () => {$/;"	m
describe	tests/schemas/enrollments-schemas.test.ts	/^    describe("neighborhood", () => {$/;"	m
describe	tests/schemas/enrollments-schemas.test.ts	/^    describe("number", () => {$/;"	m
describe	tests/schemas/enrollments-schemas.test.ts	/^    describe("state", () => {$/;"	m
describe	tests/schemas/enrollments-schemas.test.ts	/^    describe("street", () => {$/;"	m
describe	tests/schemas/enrollments-schemas.test.ts	/^  describe("address", () => {$/;"	m
describe	tests/schemas/enrollments-schemas.test.ts	/^  describe("birthday", () => {$/;"	m
describe	tests/schemas/enrollments-schemas.test.ts	/^  describe("cpf", () => {$/;"	m
describe	tests/schemas/enrollments-schemas.test.ts	/^  describe("name", () => {$/;"	m
describe	tests/schemas/enrollments-schemas.test.ts	/^  describe("phone", () => {$/;"	m
describe	tests/schemas/enrollments-schemas.test.ts	/^describe("createEnrollmentSchema", () => {$/;"	m
describe	tests/schemas/users-schemas.test.ts	/^  describe("when email is not valid", () => {$/;"	m
describe	tests/schemas/users-schemas.test.ts	/^  describe("when password is not valid", () => {$/;"	m
describe	tests/schemas/users-schemas.test.ts	/^describe("createUserSchema", () => {$/;"	m
describe	tests/services/authentication-service.test.ts	/^  describe("when email and password are valid", () => {$/;"	m
describe	tests/services/authentication-service.test.ts	/^describe("signIn", () => {$/;"	m
describe	tests/services/users-service.test.ts	/^describe("createUser", () => {$/;"	m
details	src/errors/invalid-data-error.ts	/^  details: string[];$/;"	m
disconnectDB	src/config/database.ts	/^export async function disconnectDB(): Promise<void> {$/;"	f
dotenv	src/config/envs.ts	/^import dotenv from "dotenv";$/;"	I
dotenvExpand	src/config/envs.ts	/^import dotenvExpand from "dotenv-expand";$/;"	I
duplicatedEmailError	src/services/users-service/errors.ts	/^export function duplicatedEmailError(): ApplicationError {$/;"	f
e	tests/integration/hotels.test.ts	/^import e from "express";$/;"	I
ecmaVersion	.eslintrc.js	/^    ecmaVersion: 12,$/;"	P
email	src/controllers/users-controller.ts	/^      email: user.email,$/;"	m
email	src/errors/invalid-email-error.ts	/^    email: email,$/;"	m
email	src/schemas/authentication-schemas.ts	/^  email: Joi.string().email().required(),$/;"	m
email	src/schemas/users-schemas.ts	/^  email: Joi.string().email().required(),$/;"	m
email	tests/factories/users-factory.ts	/^      email: params.email || faker.internet.email(),$/;"	m
email	tests/integration/authentication.test.ts	/^          email: user.email,$/;"	m
email	tests/integration/authentication.test.ts	/^      email: faker.internet.email(),$/;"	m
email	tests/integration/users.test.ts	/^            email: body.email,$/;"	m
email	tests/integration/users.test.ts	/^          email: body.email,$/;"	m
email	tests/integration/users.test.ts	/^      email: faker.internet.email(),$/;"	m
email	tests/schemas/authentication-schemas.test.ts	/^    email: faker.internet.email(),$/;"	m
email	tests/schemas/users-schemas.test.ts	/^    email: faker.internet.email(),$/;"	m
email	tests/services/authentication-service.test.ts	/^          email: signInUser.email,$/;"	m
email	tests/services/authentication-service.test.ts	/^      email: params.email,$/;"	m
email	tests/services/authentication-service.test.ts	/^    email: faker.internet.email(),$/;"	m
email	tests/services/users-service.test.ts	/^        email: dbUser.email,$/;"	m
email	tests/services/users-service.test.ts	/^        email: existingUser.email,$/;"	m
email	tests/services/users-service.test.ts	/^      email: faker.internet.email(),$/;"	m
endsAt	prisma/seed.ts	/^        endsAt: dayjs().add(21, "days").toDate(),$/;"	m
endsAt	tests/factories/events-factory.ts	/^      endsAt: params.endsAt || dayjs().add(5, "days").toDate(),$/;"	m
endsAt	tests/integration/event.test.ts	/^      endsAt: event.endsAt.toISOString(),$/;"	m
enrollmentId	src/services/tickets-service/index.ts	/^    enrollmentId: enrollment.id,$/;"	m
enrollmentId	tests/integration/tickets.test.ts	/^        enrollmentId: enrollment.id,$/;"	m
enrollmentId	tests/integration/tickets.test.ts	/^        enrollmentId: ticket.enrollmentId,$/;"	m
enrollmentRepository	src/services/enrollments-service/index.ts	/^import enrollmentRepository, { CreateEnrollmentParams } from "@\/repositories\/enrollment-repository";$/;"	I
enrollmentRepository	src/services/hotels-service/index.ts	/^import enrollmentRepository from "@\/repositories\/enrollment-repository";$/;"	I
enrollmentRepository	src/services/payments-service/index.ts	/^import enrollmentRepository from "@\/repositories\/enrollment-repository";$/;"	I
enrollmentRepository	src/services/tickets-service/index.ts	/^import enrollmentRepository from "@\/repositories\/enrollment-repository";$/;"	I
enrollmentsService	src/controllers/enrollments-controller.ts	/^import enrollmentsService from "@\/services\/enrollments-service";$/;"	I
env	.eslintrc.js	/^  env: {$/;"	P
envJsonFilepath	.github/workflows/scripts/generate-env-file.js	/^function envJsonFilepath() {$/;"	F
error	src/middlewares/error-handling-middleware.ts	/^    error: "InternalServerError",$/;"	m
es2021	.eslintrc.js	/^    es2021: true,$/;"	P
eventRepository	src/services/events-service/index.ts	/^import eventRepository from "@\/repositories\/event-repository";$/;"	I
eventsService	src/controllers/events-controller.ts	/^import eventsService from "@\/services\/events-service";$/;"	I
eventsService	src/services/users-service/index.ts	/^import eventsService from "..\/events-service";$/;"	I
exclude	src/utils/prisma-utils.ts	/^export function exclude<T, Key extends keyof T>(entity: T, ...keys: Key[]): Omit<T, Key> {$/;"	f
expect	tests/integration/authentication.test.ts	/^        expect(response.body.token).toBeDefined();$/;"	m
expect	tests/integration/authentication.test.ts	/^        expect(response.body.user).toEqual({$/;"	m
expect	tests/integration/authentication.test.ts	/^        expect(response.status).toBe(httpStatus.OK);$/;"	m
expect	tests/integration/authentication.test.ts	/^      expect(response.status).toBe(httpStatus.UNAUTHORIZED);$/;"	m
expect	tests/integration/authentication.test.ts	/^    expect(response.status).toBe(httpStatus.BAD_REQUEST);$/;"	m
expect	tests/integration/enrollments.test.ts	/^        expect(addresses.length).toEqual(1);$/;"	m
expect	tests/integration/enrollments.test.ts	/^        expect(enrollment).toBeDefined();$/;"	m
expect	tests/integration/enrollments.test.ts	/^        expect(response.status).toBe(httpStatus.BAD_REQUEST);$/;"	m
expect	tests/integration/enrollments.test.ts	/^        expect(response.status).toBe(httpStatus.OK);$/;"	m
expect	tests/integration/enrollments.test.ts	/^        expect(updatedEnrollment).toBeDefined();$/;"	m
expect	tests/integration/enrollments.test.ts	/^        expect(updatedEnrollment).toEqual($/;"	m
expect	tests/integration/enrollments.test.ts	/^      expect(response.body).toEqual({$/;"	m
expect	tests/integration/enrollments.test.ts	/^      expect(response.status).toBe(httpStatus.BAD_REQUEST);$/;"	m
expect	tests/integration/enrollments.test.ts	/^      expect(response.status).toBe(httpStatus.NOT_FOUND);$/;"	m
expect	tests/integration/enrollments.test.ts	/^      expect(response.status).toBe(httpStatus.OK);$/;"	m
expect	tests/integration/enrollments.test.ts	/^    expect(response.body).toEqual(address);$/;"	m
expect	tests/integration/enrollments.test.ts	/^    expect(response.status).toBe(httpStatus.NOT_FOUND);$/;"	m
expect	tests/integration/enrollments.test.ts	/^    expect(response.status).toBe(httpStatus.OK);$/;"	m
expect	tests/integration/enrollments.test.ts	/^    expect(response.status).toBe(httpStatus.UNAUTHORIZED);$/;"	m
expect	tests/integration/event.test.ts	/^    expect(response.body).toEqual({$/;"	m
expect	tests/integration/event.test.ts	/^    expect(response.status).toBe(httpStatus.NOT_FOUND);$/;"	m
expect	tests/integration/event.test.ts	/^    expect(response.status).toBe(httpStatus.OK);$/;"	m
expect	tests/integration/health.test.ts	/^    expect(response.status).toBe(httpStatus.OK);$/;"	m
expect	tests/integration/health.test.ts	/^    expect(response.text).toBe("OK!");$/;"	m
expect	tests/integration/hotels.test.ts	/^      expect(response.body).toEqual($/;"	m
expect	tests/integration/hotels.test.ts	/^      expect(response.body).toEqual([$/;"	m
expect	tests/integration/hotels.test.ts	/^      expect(response.body).toEqual([]);$/;"	m
expect	tests/integration/hotels.test.ts	/^      expect(response.body).toEqual({$/;"	m
expect	tests/integration/hotels.test.ts	/^      expect(response.status).toEqual(httpStatus.NOT_FOUND);$/;"	m
expect	tests/integration/hotels.test.ts	/^      expect(response.status).toEqual(httpStatus.OK);$/;"	m
expect	tests/integration/hotels.test.ts	/^      expect(response.status).toEqual(httpStatus.PAYMENT_REQUIRED);$/;"	m
expect	tests/integration/hotels.test.ts	/^    expect(response.status).toBe(httpStatus.UNAUTHORIZED);$/;"	m
expect	tests/integration/payments.test.ts	/^      expect(afterCount).toEqual(1);$/;"	m
expect	tests/integration/payments.test.ts	/^      expect(beforeCount).toEqual(0);$/;"	m
expect	tests/integration/payments.test.ts	/^      expect(response.body).toEqual({$/;"	m
expect	tests/integration/payments.test.ts	/^      expect(response.status).toEqual(httpStatus.BAD_REQUEST);$/;"	m
expect	tests/integration/payments.test.ts	/^      expect(response.status).toEqual(httpStatus.NOT_FOUND);$/;"	m
expect	tests/integration/payments.test.ts	/^      expect(response.status).toEqual(httpStatus.OK);$/;"	m
expect	tests/integration/payments.test.ts	/^      expect(response.status).toEqual(httpStatus.UNAUTHORIZED);$/;"	m
expect	tests/integration/payments.test.ts	/^      expect(updatedTicket.status).toEqual(TicketStatus.PAID);$/;"	m
expect	tests/integration/payments.test.ts	/^    expect(response.status).toBe(httpStatus.UNAUTHORIZED);$/;"	m
expect	tests/integration/tickets.test.ts	/^      expect(afterCount).toEqual(1);$/;"	m
expect	tests/integration/tickets.test.ts	/^      expect(beforeCount).toEqual(0);$/;"	m
expect	tests/integration/tickets.test.ts	/^      expect(response.body).toEqual([$/;"	m
expect	tests/integration/tickets.test.ts	/^      expect(response.body).toEqual([]);$/;"	m
expect	tests/integration/tickets.test.ts	/^      expect(response.body).toEqual({$/;"	m
expect	tests/integration/tickets.test.ts	/^      expect(response.status).toBe(httpStatus.OK);$/;"	m
expect	tests/integration/tickets.test.ts	/^      expect(response.status).toEqual(httpStatus.BAD_REQUEST);$/;"	m
expect	tests/integration/tickets.test.ts	/^      expect(response.status).toEqual(httpStatus.CREATED);$/;"	m
expect	tests/integration/tickets.test.ts	/^      expect(response.status).toEqual(httpStatus.NOT_FOUND);$/;"	m
expect	tests/integration/tickets.test.ts	/^      expect(response.status).toEqual(httpStatus.OK);$/;"	m
expect	tests/integration/tickets.test.ts	/^    expect(response.status).toBe(httpStatus.UNAUTHORIZED);$/;"	m
expect	tests/integration/users.test.ts	/^        expect(response.body).not.toHaveProperty("password");$/;"	m
expect	tests/integration/users.test.ts	/^        expect(response.body).toEqual(duplicatedEmailError());$/;"	m
expect	tests/integration/users.test.ts	/^        expect(response.body).toEqual({$/;"	m
expect	tests/integration/users.test.ts	/^        expect(response.status).toBe(httpStatus.CONFLICT);$/;"	m
expect	tests/integration/users.test.ts	/^        expect(response.status).toBe(httpStatus.CREATED);$/;"	m
expect	tests/integration/users.test.ts	/^        expect(user).toEqual($/;"	m
expect	tests/integration/users.test.ts	/^      expect(response.status).toBe(httpStatus.BAD_REQUEST);$/;"	m
expect	tests/integration/users.test.ts	/^    expect(response.status).toBe(httpStatus.BAD_REQUEST);$/;"	m
expect	tests/schemas/authentication-schemas.test.ts	/^      expect(error).toBeDefined();$/;"	m
expect	tests/schemas/authentication-schemas.test.ts	/^    expect(error).toBeUndefined();$/;"	m
expect	tests/schemas/enrollments-schemas.test.ts	/^        expect(error).toBeDefined();$/;"	m
expect	tests/schemas/enrollments-schemas.test.ts	/^        expect(error).toBeUndefined();$/;"	m
expect	tests/schemas/enrollments-schemas.test.ts	/^      expect(error).toBeDefined();$/;"	m
expect	tests/schemas/enrollments-schemas.test.ts	/^    expect(error).toBeUndefined();$/;"	m
expect	tests/schemas/enrollments-schemas.test.ts	/^    expect(result.error).toBeDefined();$/;"	m
expect	tests/schemas/users-schemas.test.ts	/^      expect(error).toBeDefined();$/;"	m
expect	tests/schemas/users-schemas.test.ts	/^    expect(error).toBeUndefined();$/;"	m
expect	tests/services/authentication-service.test.ts	/^      expect(createdSessionToken).toBeDefined();$/;"	m
expect	tests/services/authentication-service.test.ts	/^      expect(error).toEqual(invalidCredentialsError());$/;"	m
expect	tests/services/authentication-service.test.ts	/^      expect(session).toBeDefined();$/;"	m
expect	tests/services/authentication-service.test.ts	/^      expect(user).toEqual($/;"	m
expect	tests/services/users-service.test.ts	/^      expect(error).toEqual(duplicatedEmailError());$/;"	m
expect	tests/services/users-service.test.ts	/^    expect(await bcrypt.compare(rawPassword, dbUser.password)).toBe(true);$/;"	m
expect	tests/services/users-service.test.ts	/^    expect(dbUser.password).not.toBe(rawPassword);$/;"	m
expect	tests/services/users-service.test.ts	/^    expect(user).toEqual($/;"	m
expirationDate	src/services/payments-service/index.ts	/^  expirationDate: Date,$/;"	m
expirationDate	tests/factories/payments-factory.ts	/^    expirationDate: `${futureDate.getMonth() + 1}\/${futureDate.getFullYear()}`,$/;"	m
exports	.eslintrc.js	/^module.exports = {$/;"	P
exports	.prettierrc.js	/^module.exports = {$/;"	P
exports	jest.config.js	/^module.exports = {$/;"	P
express	src/app.ts	/^import express, { Express } from "express";$/;"	I
extends	.eslintrc.js	/^  extends: ["eslint:recommended", "plugin:@typescript-eslint\/recommended", "plugin:boundaries\/recommended"],$/;"	P
fail	tests/services/authentication-service.test.ts	/^      fail("should throw InvalidCredentialError");$/;"	m
fail	tests/services/users-service.test.ts	/^      fail("should throw duplicatedUserError");$/;"	m
faker	tests/factories/enrollments-factory.ts	/^import faker from "@faker-js\/faker";$/;"	I
faker	tests/factories/events-factory.ts	/^import faker from "@faker-js\/faker";$/;"	I
faker	tests/factories/hotels-factory.ts	/^import faker from "@faker-js\/faker";$/;"	I
faker	tests/factories/payments-factory.ts	/^import faker from "@faker-js\/faker";$/;"	I
faker	tests/factories/tickets-factory.ts	/^import faker from "@faker-js\/faker";$/;"	I
faker	tests/factories/users-factory.ts	/^import faker from "@faker-js\/faker";$/;"	I
faker	tests/integration/authentication.test.ts	/^import faker from "@faker-js\/faker";$/;"	I
faker	tests/integration/enrollments.test.ts	/^import faker from "@faker-js\/faker";$/;"	I
faker	tests/integration/hotels.test.ts	/^import faker from "@faker-js\/faker";$/;"	I
faker	tests/integration/payments.test.ts	/^import faker from "@faker-js\/faker";$/;"	I
faker	tests/integration/tickets.test.ts	/^import faker from "@faker-js\/faker";$/;"	I
faker	tests/schemas/authentication-schemas.test.ts	/^import faker from "@faker-js\/faker";$/;"	I
faker	tests/schemas/users-schemas.test.ts	/^import faker from "@faker-js\/faker";$/;"	I
faker	tests/services/authentication-service.test.ts	/^import faker from "@faker-js\/faker";$/;"	I
faker	tests/services/users-service.test.ts	/^import faker from "@faker-js\/faker";$/;"	I
findByEmail	src/repositories/user-repository/index.ts	/^async function findByEmail(email: string, select?: Prisma.UserSelect) {$/;"	f
findById	src/repositories/enrollment-repository/index.ts	/^async function findById(enrollmentId: number) {$/;"	f
findFirst	src/repositories/event-repository/index.ts	/^async function findFirst() {$/;"	f
findHotels	src/repositories/hotel-repository/index.ts	/^async function findHotels() {$/;"	f
findPaymentByTicketId	src/repositories/payment-repository/index.ts	/^async function findPaymentByTicketId(ticketId: number) {$/;"	f
findRoomsByHotelId	src/repositories/hotel-repository/index.ts	/^async function findRoomsByHotelId(hotelId: number) {$/;"	f
findTickeWithTypeById	src/repositories/ticket-repository/index.ts	/^async function findTickeWithTypeById(ticketId: number) {$/;"	f
findTicketByEnrollmentId	src/repositories/ticket-repository/index.ts	/^async function findTicketByEnrollmentId(enrollmentId: number) {$/;"	f
findTicketTypes	src/repositories/ticket-repository/index.ts	/^async function findTicketTypes() {$/;"	f
findTickeyById	src/repositories/ticket-repository/index.ts	/^async function findTickeyById(ticketId: number) {$/;"	f
findWithAddressByUserId	src/repositories/enrollment-repository/index.ts	/^async function findWithAddressByUserId(userId: number) {$/;"	f
for	src/utils/prisma-utils.ts	/^  for (const key of keys) {$/;"	m
format	.eslintrc.js	/^        format: ["PascalCase"],$/;"	P
generateCreditCardData	tests/factories/payments-factory.ts	/^export function generateCreditCardData() {$/;"	f
generateProductionEnv	.github/workflows/scripts/generate-env-file.js	/^function generateProductionEnv() {$/;"	F
generateUnauthorizedResponse	src/middlewares/authentication-middleware.ts	/^function generateUnauthorizedResponse(res: Response) {$/;"	f
generateValidToken	tests/helpers.ts	/^export async function generateValidToken(user?: User) {$/;"	f
get	src/utils/request.ts	/^async function get(url: string) {$/;"	f
getAddress	src/utils/cep-service.ts	/^async function getAddress(cep: string): Promise<ViaCEPAddress> {$/;"	f
getAddressForUpsert	src/services/enrollments-service/index.ts	/^function getAddressForUpsert(address: CreateAddressParams) {$/;"	f
getAddressFromCEP	src/controllers/enrollments-controller.ts	/^export async function getAddressFromCEP(req: AuthenticatedRequest, res: Response) {$/;"	f
getAddressFromCEP	src/services/enrollments-service/index.ts	/^async function getAddressFromCEP(cep: string): Promise<AddressEnrollment> {$/;"	f
getBooking	src/repositories/booking-repository/index.ts	/^async function getBooking(userId: number) {$/;"	f
getBooking	src/services/bookings-service/index.ts	/^async function getBooking(userId: number) {$/;"	f
getBookings	src/controllers/bookings-controller.ts	/^export async function getBookings(req: AuthenticatedRequest, res: Response) {$/;"	f
getDefaultEvent	src/controllers/events-controller.ts	/^export async function getDefaultEvent(_req: Request, res: Response) {$/;"	f
getEnrollmentByUser	src/controllers/enrollments-controller.ts	/^export async function getEnrollmentByUser(req: AuthenticatedRequest, res: Response) {$/;"	f
getFirstAddress	src/services/enrollments-service/index.ts	/^function getFirstAddress(firstAddress: Address): GetAddressResult {$/;"	f
getFirstEvent	src/services/events-service/index.ts	/^async function getFirstEvent(): Promise<GetFirstEventResult> {$/;"	f
getHotels	src/controllers/hotel-controller.ts	/^export async function getHotels(req: AuthenticatedRequest, res: Response) {$/;"	f
getHotels	src/services/hotels-service/index.ts	/^async function getHotels(userId: number) {$/;"	f
getHotelsWithRooms	src/controllers/hotel-controller.ts	/^export async function getHotelsWithRooms(req: AuthenticatedRequest, res: Response) {$/;"	f
getHotelsWithRooms	src/services/hotels-service/index.ts	/^async function getHotelsWithRooms(userId: number, hotelId: number) {$/;"	f
getOneWithAddressByUserId	src/services/enrollments-service/index.ts	/^async function getOneWithAddressByUserId(userId: number): Promise<GetOneWithAddressByUserIdResult> {$/;"	f
getPaymentByTicketId	src/controllers/payments-controller.ts	/^export async function getPaymentByTicketId(req: AuthenticatedRequest, res: Response) {$/;"	f
getPaymentByTicketId	src/services/payments-service/index.ts	/^async function getPaymentByTicketId(userId: number, ticketId: number) {$/;"	f
getTicketByUserId	src/services/tickets-service/index.ts	/^async function getTicketByUserId(userId: number) {$/;"	f
getTicketTypes	src/controllers/tickets-controller.ts	/^export async function getTicketTypes(req: AuthenticatedRequest, res: Response) {$/;"	f
getTicketTypes	src/services/tickets-service/index.ts	/^async function getTicketTypes() {$/;"	f
getTickets	src/controllers/tickets-controller.ts	/^export async function getTickets(req: AuthenticatedRequest, res: Response) {$/;"	f
getUserOrFail	src/services/authentication-service/index.ts	/^async function getUserOrFail(email: string): Promise<GetUserOrFailResult> {$/;"	f
handleApplicationErrors	src/middlewares/error-handling-middleware.ts	/^export function handleApplicationErrors(err: ApplicationError | Error, _req: Request, res: Response) {$/;"	f
hotelId	tests/factories/hotels-factory.ts	/^      hotelId: hotelId,$/;"	m
hotelId	tests/integration/hotels.test.ts	/^          hotelId: createdHotel.id,$/;"	m
hotelRepository	src/services/hotels-service/index.ts	/^import hotelRepository from "@\/repositories\/hotel-repository";$/;"	I
hotelService	src/controllers/hotel-controller.ts	/^import hotelService from "@\/services\/hotels-service";$/;"	I
httpStatus	src/controllers/authentication-controller.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	src/controllers/bookings-controller.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	src/controllers/enrollments-controller.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	src/controllers/events-controller.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	src/controllers/hotel-controller.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	src/controllers/payments-controller.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	src/controllers/tickets-controller.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	src/controllers/users-controller.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	src/middlewares/authentication-middleware.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	src/middlewares/error-handling-middleware.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	src/middlewares/validation-middleware.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	tests/integration/authentication.test.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	tests/integration/enrollments.test.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	tests/integration/event.test.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	tests/integration/health.test.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	tests/integration/hotels.test.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	tests/integration/payments.test.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	tests/integration/tickets.test.ts	/^import httpStatus from "http-status";$/;"	I
httpStatus	tests/integration/users.test.ts	/^import httpStatus from "http-status";$/;"	I
id	src/controllers/users-controller.ts	/^      id: user.id,$/;"	m
id	src/repositories/booking-repository/index.ts	/^      id: true,$/;"	m
id	src/repositories/hotel-repository/index.ts	/^      id: hotelId,$/;"	m
id	src/repositories/ticket-repository/index.ts	/^      id: ticketId,$/;"	m
id	tests/integration/authentication.test.ts	/^          id: user.id,$/;"	m
id	tests/integration/enrollments.test.ts	/^          id: enrollment.Address[0].id,$/;"	m
id	tests/integration/enrollments.test.ts	/^        id: enrollment.id,$/;"	m
id	tests/integration/event.test.ts	/^      id: event.id,$/;"	m
id	tests/integration/hotels.test.ts	/^          id: createdHotel.id,$/;"	m
id	tests/integration/hotels.test.ts	/^          id: createdRoom.id,$/;"	m
id	tests/integration/hotels.test.ts	/^        id: createdHotel.id,$/;"	m
id	tests/integration/payments.test.ts	/^        id: expect.any(Number),$/;"	m
id	tests/integration/tickets.test.ts	/^          id: ticketType.id,$/;"	m
id	tests/integration/tickets.test.ts	/^        id: expect.any(Number),$/;"	m
id	tests/integration/tickets.test.ts	/^        id: ticket.id,$/;"	m
id	tests/integration/users.test.ts	/^            id: response.body.id,$/;"	m
id	tests/integration/users.test.ts	/^          id: expect.any(Number),$/;"	m
id	tests/services/authentication-service.test.ts	/^          id: signInUser.id,$/;"	m
id	tests/services/users-service.test.ts	/^        id: dbUser.id,$/;"	m
id	tests/services/users-service.test.ts	/^        id: user.id,$/;"	m
if	prisma/seed.ts	/^  if (!event) {$/;"	m
if	src/controllers/enrollments-controller.ts	/^    if (error.name === "NotFoundError") {$/;"	m
if	src/controllers/hotel-controller.ts	/^    if (error.name === "CannotListHotelsError") {$/;"	m
if	src/controllers/hotel-controller.ts	/^    if (error.name === "NotFoundError") {$/;"	m
if	src/controllers/payments-controller.ts	/^    if (!payment) {$/;"	m
if	src/controllers/payments-controller.ts	/^    if (!ticketId || !cardData) {$/;"	m
if	src/controllers/payments-controller.ts	/^    if (!ticketId) {$/;"	m
if	src/controllers/payments-controller.ts	/^    if (error.name === "UnauthorizedError") {$/;"	m
if	src/controllers/tickets-controller.ts	/^  if (!ticketTypeId) {$/;"	m
if	src/controllers/users-controller.ts	/^    if (error.name === "DuplicatedEmailError") {$/;"	m
if	src/middlewares/authentication-middleware.ts	/^    if (!session) return generateUnauthorizedResponse(res);$/;"	m
if	src/middlewares/authentication-middleware.ts	/^  if (!authHeader) return generateUnauthorizedResponse(res);$/;"	m
if	src/middlewares/authentication-middleware.ts	/^  if (!token) return generateUnauthorizedResponse(res);$/;"	m
if	src/middlewares/error-handling-middleware.ts	/^  if (err.name === "CannotEnrollBeforeStartDateError") {$/;"	m
if	src/middlewares/error-handling-middleware.ts	/^  if (err.name === "ConflictError" || err.name === "DuplicatedEmailError") {$/;"	m
if	src/middlewares/error-handling-middleware.ts	/^  if (err.name === "InvalidCredentialsError") {$/;"	m
if	src/middlewares/error-handling-middleware.ts	/^  if (err.name === "NotFoundError") {$/;"	m
if	src/middlewares/error-handling-middleware.ts	/^  if (err.name === "UnauthorizedError") {$/;"	m
if	src/middlewares/validation-middleware.ts	/^    if (!error) {$/;"	m
if	src/repositories/user-repository/index.ts	/^  if (select) {$/;"	m
if	src/schemas/enrollments-schemas.ts	/^  if (!isValidCEP(value)) {$/;"	m
if	src/schemas/enrollments-schemas.ts	/^  if (!isValidCPF(value)) {$/;"	m
if	src/schemas/enrollments-schemas.ts	/^  if (!isValidMobilePhone(value)) {$/;"	m
if	src/schemas/enrollments-schemas.ts	/^  if (!value) return value;$/;"	m
if	src/services/authentication-service/index.ts	/^  if (!isPasswordValid) throw invalidCredentialsError();$/;"	m
if	src/services/authentication-service/index.ts	/^  if (!user) throw invalidCredentialsError();$/;"	m
if	src/services/bookings-service/index.ts	/^  if(!userBooking) {$/;"	m
if	src/services/enrollments-service/index.ts	/^  if (!enrollmentWithAddress) throw notFoundError();$/;"	m
if	src/services/enrollments-service/index.ts	/^  if (!firstAddress) return null;$/;"	m
if	src/services/enrollments-service/index.ts	/^  if (!result) {$/;"	m
if	src/services/enrollments-service/index.ts	/^  if (result.error) {$/;"	m
if	src/services/events-service/index.ts	/^  if (!event) return false;$/;"	m
if	src/services/events-service/index.ts	/^  if (!event) throw notFoundError();$/;"	m
if	src/services/hotels-service/index.ts	/^  if (!enrollment) {$/;"	m
if	src/services/hotels-service/index.ts	/^  if (!hotel) {$/;"	m
if	src/services/hotels-service/index.ts	/^  if (!ticket || ticket.status === "RESERVED" || ticket.TicketType.isRemote || !ticket.TicketType.includesHotel) {$/;"	m
if	src/services/payments-service/index.ts	/^  if (!payment) {$/;"	m
if	src/services/payments-service/index.ts	/^  if (!ticket) {$/;"	m
if	src/services/payments-service/index.ts	/^  if (enrollment.userId !== userId) {$/;"	m
if	src/services/tickets-service/index.ts	/^  if (!enrollment) {$/;"	m
if	src/services/tickets-service/index.ts	/^  if (!ticket) {$/;"	m
if	src/services/tickets-service/index.ts	/^  if (!ticketTypes) {$/;"	m
if	src/services/users-service/index.ts	/^  if (!canEnroll) {$/;"	m
if	src/services/users-service/index.ts	/^  if (userWithSameEmail) {$/;"	m
image	tests/factories/hotels-factory.ts	/^      image: faker.image.imageUrl(),$/;"	m
image	tests/integration/hotels.test.ts	/^          image: createdHotel.image,$/;"	m
image	tests/integration/hotels.test.ts	/^          image: expect.any(String),$/;"	m
image	tests/integration/hotels.test.ts	/^        image: createdHotel.image,$/;"	m
include	src/repositories/enrollment-repository/index.ts	/^    include: {$/;"	m
include	src/repositories/hotel-repository/index.ts	/^    include: {$/;"	m
include	src/repositories/ticket-repository/index.ts	/^    include: {$/;"	m
include	tests/factories/enrollments-factory.ts	/^    include: {$/;"	m
includesHotel	tests/factories/tickets-factory.ts	/^      includesHotel: faker.datatype.boolean(),$/;"	m
includesHotel	tests/factories/tickets-factory.ts	/^      includesHotel: true,$/;"	m
includesHotel	tests/integration/tickets.test.ts	/^          includesHotel: ticketType.includesHotel,$/;"	m
indent	.eslintrc.js	/^    indent: ["error", 2],$/;"	P
init	src/app.ts	/^export function init(): Promise<Express> {$/;"	f
init	src/server.ts	/^init().then(() => {$/;"	m
invalidCredentialsError	src/services/authentication-service/errors.ts	/^export function invalidCredentialsError(): ApplicationError {$/;"	f
invalidDataError	src/errors/invalid-data-error.ts	/^export function invalidDataError(details: string[]): ApplicationInvalidateDataError {$/;"	f
invalidEmailError	src/errors/invalid-email-error.ts	/^export function invalidEmailError(email: string): ApplicationEmailError {$/;"	f
isCurrentEventActive	src/services/events-service/index.ts	/^async function isCurrentEventActive(): Promise<boolean> {$/;"	f
isRemote	tests/factories/tickets-factory.ts	/^      isRemote: faker.datatype.boolean(),$/;"	m
isRemote	tests/factories/tickets-factory.ts	/^      isRemote: false,$/;"	m
isRemote	tests/factories/tickets-factory.ts	/^      isRemote: true,$/;"	m
isRemote	tests/integration/tickets.test.ts	/^          isRemote: ticketType.isRemote,$/;"	m
issuer	src/services/payments-service/index.ts	/^  issuer: string,$/;"	m
issuer	tests/factories/payments-factory.ts	/^    issuer: faker.name.findName(),$/;"	m
it	tests/integration/authentication.test.ts	/^      it("should respond with session token", async () => {$/;"	m
it	tests/integration/authentication.test.ts	/^      it("should respond with status 200", async () => {$/;"	m
it	tests/integration/authentication.test.ts	/^      it("should respond with user data", async () => {$/;"	m
it	tests/integration/authentication.test.ts	/^    it("should respond with status 401 if there is a user for given email but password is not correct", async () => {$/;"	m
it	tests/integration/authentication.test.ts	/^    it("should respond with status 401 if there is no user for given email", async () => {$/;"	m
it	tests/integration/authentication.test.ts	/^  it("should respond with status 400 when body is not given", async () => {$/;"	m
it	tests/integration/authentication.test.ts	/^  it("should respond with status 400 when body is not valid", async () => {$/;"	m
it	tests/integration/enrollments.test.ts	/^      it("should respond with status 200 and update enrollment if there is one already", async () => {$/;"	m
it	tests/integration/enrollments.test.ts	/^      it("should respond with status 201 and create new enrollment if there is not any", async () => {$/;"	m
it	tests/integration/enrollments.test.ts	/^      it("should respond with status 400 and create new enrollment if there is not any", async () => {$/;"	m
it	tests/integration/enrollments.test.ts	/^    it("should respond with status 200 and enrollment data with address when there is a enrollment for given user", async () => {$/;"	m
it	tests/integration/enrollments.test.ts	/^    it("should respond with status 400 when body is not present", async () => {$/;"	m
it	tests/integration/enrollments.test.ts	/^    it("should respond with status 400 when body is not valid", async () => {$/;"	m
it	tests/integration/enrollments.test.ts	/^    it("should respond with status 404 when there is no enrollment for given user", async () => {$/;"	m
it	tests/integration/enrollments.test.ts	/^  it("should respond with status 200 when CEP is valid", async () => {$/;"	m
it	tests/integration/enrollments.test.ts	/^  it("should respond with status 204 when CEP is valid", async () => {$/;"	m
it	tests/integration/enrollments.test.ts	/^  it("should respond with status 401 if given token is not valid", async () => {$/;"	m
it	tests/integration/enrollments.test.ts	/^  it("should respond with status 401 if no token is given", async () => {$/;"	m
it	tests/integration/enrollments.test.ts	/^  it("should respond with status 401 if there is no session for given token", async () => {$/;"	m
it	tests/integration/event.test.ts	/^  it("should respond with status 200 and event data if there is an event", async () => {$/;"	m
it	tests/integration/event.test.ts	/^  it("should respond with status 404 if there is no event", async () => {$/;"	m
it	tests/integration/health.test.ts	/^  it("should respond with status 200 with OK! text", async () => {$/;"	m
it	tests/integration/hotels.test.ts	/^    it("should respond with status 200 and a list of hotels", async () => {$/;"	m
it	tests/integration/hotels.test.ts	/^    it("should respond with status 200 and an empty array", async () => {$/;"	m
it	tests/integration/hotels.test.ts	/^    it("should respond with status 200 and hotel with no rooms", async () => {$/;"	m
it	tests/integration/hotels.test.ts	/^    it("should respond with status 200 and hotel with rooms", async () => {$/;"	m
it	tests/integration/hotels.test.ts	/^    it("should respond with status 402 when user ticket is remote ", async () => {$/;"	m
it	tests/integration/hotels.test.ts	/^    it("should respond with status 404 for invalid hotel id", async () => {$/;"	m
it	tests/integration/hotels.test.ts	/^    it("should respond with status 404 when user has no enrollment ", async () => {$/;"	m
it	tests/integration/hotels.test.ts	/^  it("should respond with status 401 if given token is not valid", async () => {$/;"	m
it	tests/integration/hotels.test.ts	/^  it("should respond with status 401 if no token is given", async () => {$/;"	m
it	tests/integration/hotels.test.ts	/^  it("should respond with status 401 if there is no session for given token", async () => {$/;"	m
it	tests/integration/payments.test.ts	/^    it("should insert a new payment in the database", async () => {$/;"	m
it	tests/integration/payments.test.ts	/^    it("should respond with status 200 and with payment data", async () => {$/;"	m
it	tests/integration/payments.test.ts	/^    it("should respond with status 400 if body param cardData is missing", async () => {$/;"	m
it	tests/integration/payments.test.ts	/^    it("should respond with status 400 if body param ticketId is missing", async () => {$/;"	m
it	tests/integration/payments.test.ts	/^    it("should respond with status 400 if query param ticketId is missing", async () => {$/;"	m
it	tests/integration/payments.test.ts	/^    it("should respond with status 401 when user doesnt own given ticket", async () => {$/;"	m
it	tests/integration/payments.test.ts	/^    it("should respond with status 404 when given ticket doesnt exist", async () => {$/;"	m
it	tests/integration/payments.test.ts	/^    it("should set ticket status as PAID", async () => {$/;"	m
it	tests/integration/payments.test.ts	/^  it("should respond with status 401 if given token is not valid", async () => {$/;"	m
it	tests/integration/payments.test.ts	/^  it("should respond with status 401 if no token is given", async () => {$/;"	m
it	tests/integration/payments.test.ts	/^  it("should respond with status 401 if there is no session for given token", async () => {$/;"	m
it	tests/integration/tickets.test.ts	/^    it("should insert a new ticket in the database", async () => {$/;"	m
it	tests/integration/tickets.test.ts	/^    it("should respond with empty array when there are no ticket types created", async () => {$/;"	m
it	tests/integration/tickets.test.ts	/^    it("should respond with status 200 and with existing TicketTypes data", async () => {$/;"	m
it	tests/integration/tickets.test.ts	/^    it("should respond with status 200 and with ticket data", async () => {$/;"	m
it	tests/integration/tickets.test.ts	/^    it("should respond with status 201 and with ticket data", async () => {$/;"	m
it	tests/integration/tickets.test.ts	/^    it("should respond with status 400 when ticketTypeId is not present in body", async () => {$/;"	m
it	tests/integration/tickets.test.ts	/^    it("should respond with status 404 when user doesnt have a ticket yet", async () => {$/;"	m
it	tests/integration/tickets.test.ts	/^    it("should respond with status 404 when user doesnt have an enrollment yet", async () => {$/;"	m
it	tests/integration/tickets.test.ts	/^    it("should respond with status 404 when user doesnt have enrollment yet", async () => {$/;"	m
it	tests/integration/tickets.test.ts	/^  it("should respond with status 401 if given token is not valid", async () => {$/;"	m
it	tests/integration/tickets.test.ts	/^  it("should respond with status 401 if no token is given", async () => {$/;"	m
it	tests/integration/tickets.test.ts	/^  it("should respond with status 401 if there is no session for given token", async () => {$/;"	m
it	tests/integration/users.test.ts	/^      it("should not return user password on body", async () => {$/;"	m
it	tests/integration/users.test.ts	/^      it("should respond with status 201 and create user when given email is unique", async () => {$/;"	m
it	tests/integration/users.test.ts	/^      it("should respond with status 409 when there is an user with given email", async () => {$/;"	m
it	tests/integration/users.test.ts	/^      it("should save user on db", async () => {$/;"	m
it	tests/integration/users.test.ts	/^    it("should respond with status 400 when current event did not started yet", async () => {$/;"	m
it	tests/integration/users.test.ts	/^    it("should respond with status 400 when there is no event", async () => {$/;"	m
it	tests/integration/users.test.ts	/^  it("should respond with status 400 when body is not given", async () => {$/;"	m
it	tests/integration/users.test.ts	/^  it("should respond with status 400 when body is not valid", async () => {$/;"	m
it	tests/schemas/authentication-schemas.test.ts	/^    it("should return error if email does not follow valid email format", () => {$/;"	m
it	tests/schemas/authentication-schemas.test.ts	/^    it("should return error if email is not present", () => {$/;"	m
it	tests/schemas/authentication-schemas.test.ts	/^    it("should return error if password is not a string", () => {$/;"	m
it	tests/schemas/authentication-schemas.test.ts	/^    it("should return error if password is not present", () => {$/;"	m
it	tests/schemas/authentication-schemas.test.ts	/^  it("should return no error if input is valid", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should not return error if addressDetail is an empty string", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should not return error if addressDetail is not present", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should not return error if addressDetail is null", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if addressDetail is not a string", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if cep is not a cep", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if cep is not masked", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if cep is not present", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if city is not a string", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if city is not present", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if neighborhood is not a string", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if neighborhood is not present", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if number is not a string", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if number is not present", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if state is not a string", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if state is not a valid brazilian state", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if state is not present", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if street is not a string", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^      it("should return error if street is not present", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^    it("should return an error if birthday is not an iso date", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^    it("should return error if address is not present", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^    it("should return error if birthday is not present", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^    it("should return error if cpf is invalid", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^    it("should return error if cpf is masked", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^    it("should return error if cpf is not present", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^    it("should return error if name is less than 3 characters", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^    it("should return error if name is not present", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^    it("should return error if phone is not a mobile phone", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^    it("should return error if phone is not masked", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^    it("should return error if phone is not present", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^  it("should return an error if input is not present", () => {$/;"	m
it	tests/schemas/enrollments-schemas.test.ts	/^  it("should return no error if schema is valid", () => {$/;"	m
it	tests/schemas/users-schemas.test.ts	/^    it("should return error if email does not follow valid email format", () => {$/;"	m
it	tests/schemas/users-schemas.test.ts	/^    it("should return error if email is not present", () => {$/;"	m
it	tests/schemas/users-schemas.test.ts	/^    it("should return error if password is not present", () => {$/;"	m
it	tests/schemas/users-schemas.test.ts	/^    it("should return error if password is shorter than 6 characters", () => {$/;"	m
it	tests/schemas/users-schemas.test.ts	/^  it("should return no error if input is valid", () => {$/;"	m
it	tests/services/authentication-service.test.ts	/^    it("should create new session and return given token", async () => {$/;"	m
it	tests/services/authentication-service.test.ts	/^    it("should return user data if given email and password are valid", async () => {$/;"	m
it	tests/services/authentication-service.test.ts	/^  it("should throw InvalidCredentialError if given password is invalid", async () => {$/;"	m
it	tests/services/authentication-service.test.ts	/^  it("should throw InvalidCredentialError if there is no user for given email", async () => {$/;"	m
it	tests/services/users-service.test.ts	/^  it("should create user when given email is unique", async () => {$/;"	m
it	tests/services/users-service.test.ts	/^  it("should hash user password", async () => {$/;"	m
it	tests/services/users-service.test.ts	/^  it("should throw duplicatedUserError if there is a user with given email", async () => {$/;"	m
joiCpfValidation	src/schemas/enrollments-schemas.ts	/^function joiCpfValidation(value: string, helpers: Joi.CustomHelpers<string>) {$/;"	f
joiMobilePhoneValidation	src/schemas/enrollments-schemas.ts	/^function joiMobilePhoneValidation(value: string, helpers: Joi.CustomHelpers<string>) {$/;"	f
jwt	src/services/authentication-service/index.ts	/^import jwt from "jsonwebtoken";$/;"	I
listHotels	src/services/hotels-service/index.ts	/^async function listHotels(userId: number) {$/;"	f
loadEnv	src/app.ts	/^loadEnv();$/;"	m
loadEnv	src/config/envs.ts	/^export function loadEnv() {$/;"	f
loadEnv	tests/setup-envs.ts	/^loadEnv();$/;"	m
loadEnvAsObjFromJson	.github/workflows/scripts/generate-env-file.js	/^function loadEnvAsObjFromJson() {$/;"	F
localidade	src/protocols.ts	/^  localidade: string,$/;"	m
logoImageUrl	prisma/seed.ts	/^        logoImageUrl: "https:\/\/files.driveneducation.com.br\/images\/logo-rounded.png",$/;"	m
logoImageUrl	tests/factories/events-factory.ts	/^      logoImageUrl: params.logoImageUrl || faker.image.imageUrl(),$/;"	m
logoImageUrl	tests/integration/event.test.ts	/^      logoImageUrl: event.logoImageUrl,$/;"	m
logradouro	src/protocols.ts	/^  logradouro: string,$/;"	m
logradouro	tests/factories/enrollments-factory.ts	/^    logradouro: "Avenida Brigadeiro Faria Lima",$/;"	m
main	prisma/seed.ts	/^async function main() {$/;"	f
main	prisma/seed.ts	/^main()$/;"	m
match	.eslintrc.js	/^          match: false,$/;"	P
message	src/errors/cannot-enroll-before-start-date-error.ts	/^    message: "Cannot enroll before event start date!",$/;"	m
message	src/errors/cannot-list-hotels-error.ts	/^    message: "Cannot list hotels!",$/;"	m
message	src/errors/invalid-data-error.ts	/^    message: "Invalid data",$/;"	m
message	src/errors/invalid-email-error.ts	/^    message: `"${email}" is not a valid email!`,$/;"	m
message	src/errors/not-found-error.ts	/^    message: "No result for this search!",$/;"	m
message	src/errors/request-error.ts	/^    message: "No result for this search!",$/;"	m
message	src/errors/unauthorized-error.ts	/^    message: "You must be signed in to continue",$/;"	m
message	src/middlewares/error-handling-middleware.ts	/^      message: err.message,$/;"	m
message	src/middlewares/error-handling-middleware.ts	/^    message: "Internal Server Error",$/;"	m
message	src/protocols.ts	/^  message: string,$/;"	m
message	src/protocols.ts	/^  message: string;$/;"	m
message	src/services/authentication-service/errors.ts	/^    message: "email or password are incorrect",$/;"	m
message	src/services/users-service/errors.ts	/^    message: "There is already an user with given email",$/;"	m
moduleDirectories	jest.config.js	/^  moduleDirectories: ["node_modules", "src"],$/;"	P
moduleNameMapper	jest.config.js	/^  moduleNameMapper: {$/;"	P
name	src/errors/cannot-enroll-before-start-date-error.ts	/^    name: "CannotEnrollBeforeStartDateError",$/;"	m
name	src/errors/cannot-list-hotels-error.ts	/^    name: "CannotListHotelsError",$/;"	m
name	src/errors/conflict-error.ts	/^    name: "ConflictError",$/;"	m
name	src/errors/invalid-data-error.ts	/^    name: "InvalidDataError",$/;"	m
name	src/errors/invalid-email-error.ts	/^    name: "InvalidEmailError",$/;"	m
name	src/errors/not-found-error.ts	/^    name: "NotFoundError",$/;"	m
name	src/errors/request-error.ts	/^    name: "RequestError",$/;"	m
name	src/errors/unauthorized-error.ts	/^    name: "UnauthorizedError",$/;"	m
name	src/protocols.ts	/^  name: string,$/;"	m
name	src/protocols.ts	/^  name: string;$/;"	m
name	src/schemas/enrollments-schemas.ts	/^  name: Joi.string().min(3).required(),$/;"	m
name	src/services/authentication-service/errors.ts	/^    name: "InvalidCredentialsError",$/;"	m
name	src/services/payments-service/index.ts	/^  name: string,$/;"	m
name	src/services/users-service/errors.ts	/^    name: "DuplicatedEmailError",$/;"	m
name	tests/factories/enrollments-factory.ts	/^      name: faker.name.findName(),$/;"	m
name	tests/factories/hotels-factory.ts	/^      name: "1020",$/;"	m
name	tests/factories/hotels-factory.ts	/^      name: faker.name.findName(),$/;"	m
name	tests/factories/payments-factory.ts	/^    name: faker.name.findName(),$/;"	m
name	tests/factories/tickets-factory.ts	/^      name: faker.name.findName(),$/;"	m
name	tests/integration/enrollments.test.ts	/^            name: body.name,$/;"	m
name	tests/integration/enrollments.test.ts	/^        name: enrollment.name,$/;"	m
name	tests/integration/enrollments.test.ts	/^        name: faker.name.findName(),$/;"	m
name	tests/integration/hotels.test.ts	/^          name: createdHotel.name,$/;"	m
name	tests/integration/hotels.test.ts	/^          name: createdRoom.name,$/;"	m
name	tests/integration/hotels.test.ts	/^        name: createdHotel.name,$/;"	m
name	tests/integration/tickets.test.ts	/^          name: ticketType.name,$/;"	m
name	tests/schemas/enrollments-schemas.test.ts	/^    name: faker.name.findName(),$/;"	m
named	.eslintrc.js	/^        named: "never",$/;"	P
neighborhood	src/schemas/enrollments-schemas.ts	/^    neighborhood: Joi.string().required(),$/;"	m
neighborhood	tests/factories/enrollments-factory.ts	/^          neighborhood: faker.address.city(),$/;"	m
neighborhood	tests/integration/enrollments.test.ts	/^          neighborhood: enrollment.Address[0].neighborhood,$/;"	m
neighborhood	tests/integration/enrollments.test.ts	/^          neighborhood: faker.address.secondaryAddress(),$/;"	m
neighborhood	tests/schemas/enrollments-schemas.test.ts	/^            neighborhood: faker.datatype.number(),$/;"	m
neighborhood	tests/schemas/enrollments-schemas.test.ts	/^      neighborhood: faker.address.secondaryAddress(),$/;"	m
next	src/middlewares/validation-middleware.ts	/^      next();$/;"	m
node	.eslintrc.js	/^    node: true,$/;"	P
notFoundError	src/errors/not-found-error.ts	/^export function notFoundError(): ApplicationError {$/;"	f
number	src/schemas/enrollments-schemas.ts	/^    number: Joi.string().required(),$/;"	m
number	src/services/payments-service/index.ts	/^  number: number,$/;"	m
number	tests/factories/enrollments-factory.ts	/^          number: faker.datatype.number().toString(),$/;"	m
number	tests/factories/payments-factory.ts	/^    number: faker.datatype.number({ min: 100000000000000, max: 999999999999999 }).toString(),$/;"	m
number	tests/integration/enrollments.test.ts	/^          number: enrollment.Address[0].number,$/;"	m
number	tests/integration/enrollments.test.ts	/^          number: faker.datatype.number().toString(),$/;"	m
number	tests/schemas/enrollments-schemas.test.ts	/^            number: faker.datatype.number(),$/;"	m
number	tests/schemas/enrollments-schemas.test.ts	/^      number: faker.datatype.number().toString(),$/;"	m
parser	.eslintrc.js	/^  parser: "@typescript-eslint\/parser",$/;"	P
parserOptions	.eslintrc.js	/^  parserOptions: {$/;"	P
password	src/schemas/authentication-schemas.ts	/^  password: Joi.string().required(),$/;"	m
password	src/schemas/users-schemas.ts	/^  password: Joi.string().min(6).required(),$/;"	m
password	src/services/users-service/index.ts	/^    password: hashedPassword,$/;"	m
password	tests/factories/users-factory.ts	/^      password: hashedPassword,$/;"	m
password	tests/integration/authentication.test.ts	/^        password: faker.lorem.word(),$/;"	m
password	tests/integration/authentication.test.ts	/^      password: faker.internet.password(6),$/;"	m
password	tests/integration/users.test.ts	/^      password: faker.internet.password(6),$/;"	m
password	tests/schemas/authentication-schemas.test.ts	/^    password: faker.internet.password(6),$/;"	m
password	tests/schemas/users-schemas.test.ts	/^    password: faker.internet.password(6),$/;"	m
password	tests/services/authentication-service.test.ts	/^      password: "invalid-password",$/;"	m
password	tests/services/authentication-service.test.ts	/^    password: faker.internet.password(6),$/;"	m
password	tests/services/users-service.test.ts	/^        password: faker.internet.password(6),$/;"	m
password	tests/services/users-service.test.ts	/^      password: faker.internet.password(6),$/;"	m
password	tests/services/users-service.test.ts	/^      password: rawPassword,$/;"	m
paymentProcess	src/controllers/payments-controller.ts	/^export async function paymentProcess(req: AuthenticatedRequest, res: Response) {$/;"	f
paymentProcess	src/services/payments-service/index.ts	/^async function paymentProcess(ticketId: number, userId: number, cardData: CardPaymentParams) {$/;"	f
paymentRepository	src/services/payments-service/index.ts	/^import paymentRepository, { PaymentParams } from "@\/repositories\/payment-repository";$/;"	I
paymentService	src/controllers/payments-controller.ts	/^import paymentService from "@\/services\/payments-service";$/;"	I
phone	src/schemas/enrollments-schemas.ts	/^  phone: mobilePhoneValidationSchema,$/;"	m
phone	tests/factories/enrollments-factory.ts	/^      phone: faker.phone.phoneNumber("(##) 9####-####"),$/;"	m
phone	tests/integration/enrollments.test.ts	/^            phone: body.phone,$/;"	m
phone	tests/integration/enrollments.test.ts	/^        phone: "(21) 98999-9999",$/;"	m
phone	tests/integration/enrollments.test.ts	/^        phone: enrollment.phone,$/;"	m
phone	tests/schemas/enrollments-schemas.test.ts	/^    phone: "(21) 98999-9999",$/;"	m
plugins	.eslintrc.js	/^  plugins: ["@typescript-eslint", "boundaries"],$/;"	P
postBookings	src/controllers/bookings-controller.ts	/^export async function postBookings(req: AuthenticatedRequest, res: Response) {$/;"	f
postCreateOrUpdateEnrollment	src/controllers/enrollments-controller.ts	/^export async function postCreateOrUpdateEnrollment(req: AuthenticatedRequest, res: Response) {$/;"	f
preset	jest.config.js	/^  preset: "ts-jest",$/;"	P
price	tests/factories/tickets-factory.ts	/^      price: faker.datatype.number(),$/;"	m
price	tests/integration/tickets.test.ts	/^          price: ticketType.price,$/;"	m
printWidth	.prettierrc.js	/^  printWidth: 120,$/;"	P
prisma	src/config/database.ts	/^export let prisma: PrismaClient;$/;"	v
quotes	.eslintrc.js	/^    quotes: ["error", "double"],$/;"	P
regex	.eslintrc.js	/^          regex: "^I[A-Z]",$/;"	P
removeEnvJson	.github/workflows/scripts/generate-env-file.js	/^function removeEnvJson() {$/;"	F
request	src/utils/request.ts	/^export const request = {$/;"	v
requestError	src/errors/request-error.ts	/^export function requestError(status: number, statusText: string): RequestError {$/;"	f
restoreMocks	jest.config.js	/^  restoreMocks: true,$/;"	P
return	src/middlewares/validation-middleware.ts	/^  return (req: Request, res: Response, next: NextFunction) => {$/;"	m
rules	.eslintrc.js	/^  rules: {$/;"	P
saveEnvStrToFile	.github/workflows/scripts/generate-env-file.js	/^function saveEnvStrToFile(envStr) {$/;"	F
select	src/repositories/booking-repository/index.ts	/^    select: {$/;"	m
selector	.eslintrc.js	/^        selector: "interface",$/;"	P
semi	.eslintrc.js	/^    semi: ["error", "always"],$/;"	P
semi	.prettierrc.js	/^  semi: true,$/;"	P
sessionRepository	src/services/authentication-service/index.ts	/^import sessionRepository from "@\/repositories\/session-repository";$/;"	I
settings	.eslintrc.js	/^  settings: {$/;"	P
setupFiles	jest.config.js	/^  setupFiles: ["<rootDir>\/tests\/setup-envs.ts"],$/;"	P
signIn	src/services/authentication-service/index.ts	/^async function signIn(params: SignInParams): Promise<SignInResult> {$/;"	f
signInSchema	src/schemas/authentication-schemas.ts	/^export const signInSchema = Joi.object<SignInParams>({$/;"	v
singInPost	src/controllers/authentication-controller.ts	/^export async function singInPost(req: Request, res: Response) {$/;"	f
singleQuote	.prettierrc.js	/^  singleQuote: true,$/;"	P
sourceType	.eslintrc.js	/^    sourceType: "module",$/;"	P
startsAt	prisma/seed.ts	/^        startsAt: dayjs().toDate(),$/;"	m
startsAt	tests/factories/events-factory.ts	/^      startsAt: params.startsAt || dayjs().subtract(1, "day").toDate(),$/;"	m
startsAt	tests/integration/event.test.ts	/^      startsAt: event.startsAt.toISOString(),$/;"	m
state	src/schemas/enrollments-schemas.ts	/^    state: Joi.string()$/;"	m
state	tests/factories/enrollments-factory.ts	/^          state: faker.helpers.arrayElement(getStates()).name,$/;"	m
state	tests/integration/enrollments.test.ts	/^          state: enrollment.Address[0].state,$/;"	m
state	tests/integration/enrollments.test.ts	/^          state: faker.helpers.arrayElement(getStates()).code,$/;"	m
state	tests/schemas/enrollments-schemas.test.ts	/^            state: "XX",$/;"	m
state	tests/schemas/enrollments-schemas.test.ts	/^            state: faker.datatype.number(),$/;"	m
state	tests/schemas/enrollments-schemas.test.ts	/^      state: faker.helpers.arrayElement(getStates()).code,$/;"	m
status	src/protocols.ts	/^  status: number,$/;"	m
status	src/repositories/ticket-repository/index.ts	/^      status: TicketStatus.PAID,$/;"	m
status	src/services/tickets-service/index.ts	/^    status: TicketStatus.RESERVED$/;"	m
status	tests/integration/tickets.test.ts	/^        status: TicketStatus.RESERVED,$/;"	m
status	tests/integration/tickets.test.ts	/^        status: ticket.status,$/;"	m
statusText	src/protocols.ts	/^  statusText: string,$/;"	m
street	src/schemas/enrollments-schemas.ts	/^    street: Joi.string().required(),$/;"	m
street	tests/factories/enrollments-factory.ts	/^          street: faker.address.streetName(),$/;"	m
street	tests/integration/enrollments.test.ts	/^          street: enrollment.Address[0].street,$/;"	m
street	tests/integration/enrollments.test.ts	/^          street: faker.address.streetName(),$/;"	m
street	tests/schemas/enrollments-schemas.test.ts	/^            street: faker.datatype.number(),$/;"	m
street	tests/schemas/enrollments-schemas.test.ts	/^      street: faker.address.streetName(),$/;"	m
supertest	tests/integration/authentication.test.ts	/^import supertest from "supertest";$/;"	I
supertest	tests/integration/enrollments.test.ts	/^import supertest from "supertest";$/;"	I
supertest	tests/integration/event.test.ts	/^import supertest from "supertest";$/;"	I
supertest	tests/integration/health.test.ts	/^import supertest from "supertest";$/;"	I
supertest	tests/integration/hotels.test.ts	/^import supertest from "supertest";$/;"	I
supertest	tests/integration/payments.test.ts	/^import supertest from "supertest";$/;"	I
supertest	tests/integration/tickets.test.ts	/^import supertest from "supertest";$/;"	I
supertest	tests/integration/users.test.ts	/^import supertest from "supertest";$/;"	I
tabWidth	.prettierrc.js	/^  tabWidth: 2,$/;"	P
testEnvironment	jest.config.js	/^  testEnvironment: "node",$/;"	P
testMatch	jest.config.js	/^  testMatch: ["<rootDir>\/tests\/**\/*.(test|spec).ts"],$/;"	P
ticketId	tests/integration/payments.test.ts	/^        ticketId: ticket.id,$/;"	m
ticketProcessPayment	src/repositories/ticket-repository/index.ts	/^async function ticketProcessPayment(ticketId: number) {$/;"	f
ticketRepository	src/services/hotels-service/index.ts	/^import ticketRepository from "@\/repositories\/ticket-repository";$/;"	I
ticketRepository	src/services/payments-service/index.ts	/^import ticketRepository from "@\/repositories\/ticket-repository";$/;"	I
ticketRepository	src/services/tickets-service/index.ts	/^import ticketRepository from "@\/repositories\/ticket-repository";$/;"	I
ticketService	src/controllers/tickets-controller.ts	/^import ticketService from "@\/services\/tickets-service";$/;"	I
ticketTypeId	tests/integration/tickets.test.ts	/^        ticketTypeId: ticket.ticketTypeId,$/;"	m
ticketTypeId	tests/integration/tickets.test.ts	/^        ticketTypeId: ticketType.id,$/;"	m
title	prisma/seed.ts	/^        title: "Driven.t",$/;"	m
title	tests/factories/events-factory.ts	/^      title: params.title || faker.lorem.sentence(),$/;"	m
title	tests/integration/event.test.ts	/^      title: event.title,$/;"	m
token	src/services/authentication-service/index.ts	/^  token: string;$/;"	m
token	tests/factories/sessions-factory.ts	/^      token: token,$/;"	m
token	tests/services/authentication-service.test.ts	/^          token: createdSessionToken,$/;"	m
transform	jest.config.js	/^  transform: {$/;"	P
typescript	.eslintrc.js	/^      typescript: {$/;"	P
uf	src/protocols.ts	/^  uf: string,$/;"	m
uf	tests/factories/enrollments-factory.ts	/^    uf: "SP",$/;"	m
unauthorizedError	src/errors/unauthorized-error.ts	/^export function unauthorizedError(): ApplicationError {$/;"	f
update	src/repositories/address-repository/index.ts	/^    update: updatedAddress,$/;"	m
update	src/repositories/enrollment-repository/index.ts	/^    update: updatedEnrollment,$/;"	m
updatedAt	tests/integration/hotels.test.ts	/^          updatedAt: createdHotel.updatedAt.toISOString()$/;"	m
updatedAt	tests/integration/hotels.test.ts	/^          updatedAt: createdHotel.updatedAt.toISOString(),$/;"	m
updatedAt	tests/integration/hotels.test.ts	/^          updatedAt: createdRoom.updatedAt.toISOString(),$/;"	m
updatedAt	tests/integration/hotels.test.ts	/^        updatedAt: createdHotel.updatedAt.toISOString(),$/;"	m
updatedAt	tests/integration/payments.test.ts	/^        updatedAt: expect.any(String),$/;"	m
updatedAt	tests/integration/tickets.test.ts	/^          updatedAt: ticketType.updatedAt.toISOString(),$/;"	m
updatedAt	tests/integration/tickets.test.ts	/^        updatedAt: expect.any(String),$/;"	m
updatedAt	tests/integration/tickets.test.ts	/^        updatedAt: ticket.updatedAt.toISOString(),$/;"	m
updatedEnrollment	src/repositories/enrollment-repository/index.ts	/^  updatedEnrollment: UpdateEnrollmentParams,$/;"	m
upsert	src/repositories/address-repository/index.ts	/^async function upsert(enrollmentId: number, createdAddress: CreateAddressParams, updatedAddress: UpdateAddressParams) {$/;"	f
upsert	src/repositories/enrollment-repository/index.ts	/^async function upsert($/;"	f
user	src/services/authentication-service/index.ts	/^    user: exclude(user, "password"),$/;"	m
user	src/services/authentication-service/index.ts	/^  user: Pick<User, "id" | "email">;$/;"	m
userId	src/controllers/enrollments-controller.ts	/^      userId: req.userId,$/;"	m
userId	src/middlewares/authentication-middleware.ts	/^  userId: number;$/;"	m
userId	src/repositories/enrollment-repository/index.ts	/^  userId: number,$/;"	m
userId	tests/factories/enrollments-factory.ts	/^      userId: incomingUser.id,$/;"	m
userId	tests/factories/sessions-factory.ts	/^      userId: user.id,$/;"	m
userId	tests/services/authentication-service.test.ts	/^          userId: user.id,$/;"	m
userRepository	src/services/authentication-service/index.ts	/^import userRepository from "@\/repositories\/user-repository";$/;"	I
userRepository	src/services/users-service/index.ts	/^import userRepository from "@\/repositories\/user-repository";$/;"	I
userService	src/controllers/users-controller.ts	/^import userService from "@\/services\/users-service";$/;"	I
userService	tests/services/users-service.test.ts	/^import userService, { duplicatedEmailError } from "@\/services\/users-service";$/;"	I
usersPost	src/controllers/users-controller.ts	/^export async function usersPost(req: Request, res: Response) {$/;"	f
validate	src/middlewares/validation-middleware.ts	/^function validate(schema: ObjectSchema, type: "body" | "params") {$/;"	f
validateBody	src/middlewares/validation-middleware.ts	/^export function validateBody<T>(schema: ObjectSchema<T>): ValidationMiddleware {$/;"	f
validateParams	src/middlewares/validation-middleware.ts	/^export function validateParams<T>(schema: ObjectSchema<T>): ValidationMiddleware {$/;"	f
validatePasswordOrFail	src/services/authentication-service/index.ts	/^async function validatePasswordOrFail(password: string, userPassword: string) {$/;"	f
validateUniqueEmailOrFail	src/services/users-service/index.ts	/^async function validateUniqueEmailOrFail(email: string) {$/;"	f
value	src/services/payments-service/index.ts	/^    value: ticket.TicketType.price,$/;"	m
value	tests/integration/payments.test.ts	/^        value: ticketType.price,$/;"	m
verifyTicketAndEnrollment	src/services/payments-service/index.ts	/^async function verifyTicketAndEnrollment(ticketId: number, userId: number) {$/;"	f
where	src/middlewares/authentication-middleware.ts	/^      where: {$/;"	m
where	src/repositories/address-repository/index.ts	/^    where: {$/;"	m
where	src/repositories/booking-repository/index.ts	/^    where: {$/;"	m
where	src/repositories/enrollment-repository/index.ts	/^    where: { id: enrollmentId }$/;"	m
where	src/repositories/enrollment-repository/index.ts	/^    where: { userId },$/;"	m
where	src/repositories/enrollment-repository/index.ts	/^    where: {$/;"	m
where	src/repositories/hotel-repository/index.ts	/^    where: {$/;"	m
where	src/repositories/payment-repository/index.ts	/^    where: {$/;"	m
where	src/repositories/ticket-repository/index.ts	/^    where: {$/;"	m
where	src/repositories/user-repository/index.ts	/^    where: {$/;"	m
where	tests/integration/users.test.ts	/^          where: { email: body.email },$/;"	m
where	tests/services/authentication-service.test.ts	/^        where: {$/;"	m
where	tests/services/users-service.test.ts	/^      where: {$/;"	m
